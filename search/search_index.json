{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"Index","text":""},{"location":"#welcome-to-my-blog","title":"Welcome to My Blog","text":""},{"location":"#nju","title":"NJU \u64cd\u4f5c\u7cfb\u7edf","text":"<p>NJU \u64cd\u4f5c\u7cfb\u7edf\uff1a\u8bbe\u8ba1\u4e0e\u5b9e\u73b0 (2023 \u6625\u5b63\u5b66\u671f)</p> <ul> <li> Peterson \u7b97\u6cd5 model checker</li> </ul>"},{"location":"#metal","title":"Metal","text":"<p>Metal-Tutorial</p> <p>MTKView \u662fMetalKit\u7684\u4e00\u4e2a\u7c7b\uff0clayer \u662f CAMetalLayer\uff0c\u8d1f\u8d23\u6e32\u67d3\u5185\u5bb9\u5230\u5c4f\u5e55\u3002</p> <p>\u9a71\u52a8\u6a21\u5f0f \u63d0\u4f9b\u4e09\u79cd\u6e32\u67d3\u6a21\u5f0f\u3002\u5206\u522b\u7531\u4e24\u4e2a\u53d8\u91cf\u63a7\u5236\u3002</p> <ul> <li>\u9ed8\u8ba4\u6a21\u5f0f\uff0cpaused \u548c enableSetNeedsDisplay \u90fd\u662fNO\uff0c\u6e32\u67d3\u7531\u5185\u90e8\u7684\u5b9a\u65f6\u5668\u9a71\u52a8</li> <li>paused \u548c enableSetNeedsDisplay \u90fd\u662fYES\uff0c\u7531view\u7684\u6e32\u67d3\u901a\u77e5\u9a71\u52a8\uff0c\u6bd4\u5982\u8c03\u7528setNeedsDisplay</li> <li>paused \u662f YES\uff0c enableSetNeedsDisplay \u662f NO\uff0c \u8fd9\u4e2a\u7531\u4e3b\u52a8\u8c03\u7528MTKView \u7684draw\u65b9\u6cd5</li> </ul> <p>\u6e32\u67d3\u65b9\u6cd5</p> <ul> <li>\u5b50\u7c7bMTKView\uff0c\u5728drawRect:\u65b9\u6cd5\u91cc\u5b9e\u73b0</li> <li>\u8bbe\u7f6eMTKView\u7684\u4ee3\u7406\uff0c\u5728\u4ee3\u7406drawInMTKView:\u65b9\u6cd5\u5b9e\u73b0</li> </ul> <p>LearnMetal</p>"},{"location":"#_1","title":"\u7b97\u6cd5","text":"<p>fucking-algorithm</p>"},{"location":"#_2","title":"\u5b9a\u70b9\u6570","text":"<p>\u5b9a\u70b9\u6570\u4f18\u5316\uff1a\u6027\u80fd\u6210\u500d\u63d0\u5347</p>"},{"location":"#_3","title":"\u5176\u5b83","text":"<ul> <li>\u6d59\u6c5f\u5927\u5b66\u8bfe\u7a0b\u653b\u7565\u5171\u4eab\u8ba1\u5212</li> <li>C++\u5b66\u4e60</li> <li>GCC \u8fdb\u884c\u52a8\u6001\u94fe\u63a5\u7684\u5b8c\u6574\u8fc7\u7a0b\u662f\u600e\u6837\u7684\uff1f - \u7a0b\u5e8f\u55b5\u5927\u4eba\u7684\u56de\u7b54 - \u77e5\u4e4e</li> <li>xHook</li> </ul>"},{"location":"about/","title":"About","text":""},{"location":"about/#about-me","title":"About me","text":"<p>now is nothing ~~~</p>"},{"location":"reference/","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs-material.</p>"},{"location":"reference/#mklorum","title":"MkLorum","text":""},{"location":"reference/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"reference/#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"reference/#footnotes","title":"Footnotes","text":"<p>Lorem ipsum<sup>1</sup> dolor sit amet, consectetur adipiscing elit.<sup>2</sup></p>"},{"location":"reference/#button","title":"Button","text":"<p>Subscribe to our newsletter</p>"},{"location":"reference/#code-block","title":"code block","text":""},{"location":"reference/#code-block-with-title","title":"Code block with title","text":"bubble_sort.py<pre><code>def bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n</code></pre>"},{"location":"reference/#adding-line-numbers","title":"Adding line numbers","text":"<pre><code>def bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n</code></pre>"},{"location":"reference/#highlighting-specific-lines","title":"Highlighting specific lines","text":"<p>select lines</p> <p><pre><code>def bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n</code></pre> line ranges</p> <pre><code>def bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n</code></pre>"},{"location":"reference/#content-tabs","title":"Content tabs","text":"CC++objc <pre><code>#include &lt;stdio.h&gt;\n\nint main(void) {\n  printf(\"Hello world!\\n\");\n  return 0;\n}\n</code></pre> <pre><code>#include &lt;iostream&gt;\n\nint main(void) {\n  std::cout &lt;&lt; \"Hello world!\" &lt;&lt; std::endl;\n  return 0;\n}\n</code></pre> <pre><code>- (void)audioRequestAuthorization:(void(^)(BOOL state))complete {\n    AVAuthorizationStatus status = [AVCaptureDevice authorizationStatusForMediaType:AVMediaTypeAudio];\n    if (status == AVAuthorizationStatusNotDetermined) {\n        [AVCaptureDevice requestAccessForMediaType:AVMediaTypeAudio\n                                completionHandler:^(BOOL granted) {\n            if (granted) {\n                complete(YES);\n            } else {\n                complete(NO);\n            }\n        }];\n    } else if (status == AVAuthorizationStatusAuthorized) {\n        complete(YES);\n    } else  {\n        complete(NO);\n    }\n}\n</code></pre>"},{"location":"reference/#data-tables","title":"Data tables","text":"Method Description <code>GET</code>      Fetch resource <code>PUT</code>  Update resource <code>DELETE</code>      Delete resource"},{"location":"reference/#diagrams","title":"Diagrams","text":"<pre><code>graph LR\n  A[Start] --&gt; B{Error?};\n  B --&gt;|Yes| C[Hmm...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Yay!];</code></pre> <pre><code>sequenceDiagram\n  autonumber\n  Alice-&gt;&gt;John: Hello John, how are you?\n  loop Healthcheck\n      John-&gt;&gt;John: Fight against hypochondria\n  end\n  Note right of John: Rational thoughts!\n  John--&gt;&gt;Alice: Great!\n  John-&gt;&gt;Bob: How about you?\n  Bob--&gt;&gt;John: Jolly good!</code></pre>"},{"location":"reference/#formatting","title":"Formatting","text":""},{"location":"reference/#highlighting-changes","title":"Highlighting changes","text":"<p>Text can be deleted and replacement text added. This can also be combined into onea single operation. Highlighting is also possible and comments can be added inline.</p> <p>Formatting can also be applied to blocks by putting the opening and closing tags on separate lines and adding new lines between the tags and the content.</p>"},{"location":"reference/#highlighting-text","title":"Highlighting text","text":"<ul> <li>This was marked</li> <li>This was inserted</li> <li>This was deleted</li> </ul>"},{"location":"reference/#sub-and-superscripts","title":"Sub- and superscripts","text":"<ul> <li>H<sub>2</sub>O</li> <li>A<sup>T</sup>A</li> </ul>"},{"location":"reference/#adding-keyboard-keys","title":"Adding keyboard keys","text":"<p>Ctrl+Alt+Del</p>"},{"location":"reference/#grids","title":"Grids","text":""},{"location":"reference/#list-syntax","title":"List syntax","text":"<ul> <li> HTML for content and structure</li> <li> JavaScript for interactivity</li> <li> CSS for text running out of boxes</li> <li> Internet Explorer ... huh?</li> </ul> <ul> <li> <p> Set up in 5 minutes</p> <p>Install <code>mkdocs-material</code> with <code>pip</code> and get up and running in minutes</p> <p> Getting started</p> </li> <li> <p> It's just Markdown</p> <p>Focus on your content and generate a responsive and searchable static site</p> <p> Reference</p> </li> <li> <p> Made to measure</p> <p>Change the colors, fonts, language, icons, logo and more with a few lines</p> <p> Customization</p> </li> <li> <p> Open Source, MIT</p> <p>Material for MkDocs is licensed under MIT and available on [GitHub]</p> <p> License</p> </li> </ul>"},{"location":"reference/#block-syntax","title":"Block syntax","text":"<p> HTML for content and structure</p> <p> JavaScript for interactivity</p> <p> CSS for text running out of boxes</p> <p> Internet Explorer ... huh?</p>"},{"location":"reference/#using-generic-grids","title":"Using generic grids","text":"Unordered listOrdered list <ul> <li>Sed sagittis eleifend rutrum</li> <li>Donec vitae suscipit est</li> <li>Nulla tempor lobortis orci</li> </ul> <ol> <li>Sed sagittis eleifend rutrum</li> <li>Donec vitae suscipit est</li> <li>Nulla tempor lobortis orci</li> </ol> Content tabs<pre><code>=== \"Unordered list\"\n\n    * Sed sagittis eleifend rutrum\n    * Donec vitae suscipit est\n    * Nulla tempor lobortis orci\n\n=== \"Ordered list\"\n\n    1. Sed sagittis eleifend rutrum\n    2. Donec vitae suscipit est\n    3. Nulla tempor lobortis orci\n</code></pre>"},{"location":"reference/#annotations","title":"Annotations","text":"<p>Lorem ipsum dolor sit amet, (1) consectetur adipiscing elit.</p> <ol> <li> I'm an annotation! I can contain <code>code</code>, formatted     text, images, ... basically anything that can be expressed in Markdown.</li> </ol> <ol> <li> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.\u00a0\u21a9</p> </li> <li> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.\u00a0\u21a9</p> </li> </ol>"},{"location":"Category/AudioAndVideo/","title":"Index","text":""},{"location":"Category/AudioAndVideo/#_1","title":"\u97f3\u89c6\u9891\u76f8\u5173","text":"<p>ffplay frame queue\u5206\u6790</p>"},{"location":"Category/Graphics/","title":"Index","text":"<p>Graphics</p>"},{"location":"Category/Graphics/Metal/","title":"Index","text":"<p>Metal</p> <ul> <li>\u73b0\u4ee3\u56fe\u5f62API - metal\u7bc7</li> <li>Metal\u5165\u95e8\u7ecf\u9a8c\u4e0e\u601d\u8003</li> <li>Apple Metal</li> <li>Metal Shading Language Guide(Metal\u7740\u8272\u8bed\u8a00\u4ecb\u7ecd)</li> <li>Everything about the Metal API(\u4ecb\u7ecd\u65b0\u7279\u6027)</li> <li>LearnMetal(loyinglin \u7684\u6559\u7a0b\u5165\u95e8\u4e0e\u8fdb\u9636)</li> <li>Metal\u4e0e\u56fe\u5f62\u6e32\u67d3\u56db\uff1a\u5de5\u5177\u4e0e\u8c03\u8bd5</li> <li>23. Debugging &amp; Profiling</li> </ul>"},{"location":"Category/Graphics/Metal/#_1","title":"\u5176\u5b83","text":"<ul> <li>GPU \u67b6\u6784\u7684\u4e00\u70b9\u6d45\u663e\u8ba4\u8bc6</li> <li>\u77e5\u4e4e OpenGL \u8bdd\u9898\u7ec4</li> </ul>"},{"location":"Category/Graphics/Metal/MetalByTutorials/Chapter3/","title":"Chapter3","text":"<p>+## The GPU and CPU</p> <p>Every computer <code>comes</code> <code>equipped</code> with a Graphics Processing Unit (GPU) and Central Processing Unit (CPU).</p> <p>\u6bcf\u53f0\u8ba1\u7b97\u673a\u90fd\u914d\u5907\u4e86\u56fe\u5f62\u5904\u7406\u5355\u5143\uff08GPU\uff09\u548c\u4e2d\u592e\u5904\u7406\u5355\u5143\uff08CPU\uff09\u3002</p> <ul> <li>equipped: US  /\u026a\u02c8kw\u026apt/ \u914d\u5907\uff0c\u4e3a\u67d0\u7269\u63d0\u4f9b\u5fc5\u8981\u7684\u8bbe\u5907\u6216\u88c5\u5907\u3002</li> <li>comes: \u6765\uff0c\u8868\u793a\u67d0\u7269\u5177\u6709\u6216\u5e26\u6709\u67d0\u79cd\u7279\u5f81\u6216\u5c5e\u6027\u3002</li> </ul> <p>The GPU is a specialized hardware component that can process images, videos and massive amounts of data really fast. </p> <p>GPU\u662f\u4e00\u79cd\u4e13\u95e8\u7684\u786c\u4ef6\u7ec4\u4ef6\uff0c\u53ef\u4ee5\u5feb\u901f\u5904\u7406\u56fe\u50cf\u3001\u89c6\u9891\u548c\u5927\u91cf\u7684\u6570\u636e\u3002</p> <p>This operation is known as <code>throughput</code> and is measured by the amount of data processed in a specific unit of time. </p> <p>\u6b64\u64cd\u4f5c\u79f0\u4e3a\u541e\u5410\u91cf\uff0c\u901a\u8fc7\u7279\u5b9a\u65f6\u95f4\u5355\u4f4d\u5185\u5904\u7406\u7684\u6570\u636e\u91cf\u6765\u8861\u91cf\u3002</p> <p>The CPU, on the other hand, manages resources and is responsible for the computer\u2019s operations. </p> <p>\u53e6\u4e00\u65b9\u9762\uff0cCPU \u7ba1\u7406\u8d44\u6e90\u5e76\u8d1f\u8d23\u8ba1\u7b97\u673a\u7684\u64cd\u4f5c\u3002</p> <p>Although the CPU can\u2019t process huge amounts of data like the GPU, it can process many sequential tasks (one after another) really fast. </p> <p>The time necessary to process a task is known as <code>latency</code>.</p> <ul> <li>massive: \u5927\u91cf\u7684\uff0c\u6307\u6570\u91cf\u5e9e\u5927\u6216\u89c4\u6a21\u5de8\u5927\uff1b</li> <li>throughput: \u541e\u5410\u91cf</li> </ul>"},{"location":"Category/Graphics/OpenGL/","title":"Index","text":"<p>OpenGL</p> <ul> <li> <p>Modern OpenGL Tutorias Get the source</p> </li> <li> <p>Scratchapixel 3.0</p> </li> </ul>"},{"location":"Category/SystemOperation/NJU/10.%20%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%EF%BC%9A%E5%90%8C%E6%AD%A5%20%282%29/","title":"10. \u5e76\u53d1\u63a7\u5236\uff1a\u540c\u6b65 (2)","text":""},{"location":"Category/SystemOperation/NJU/10.%20%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%EF%BC%9A%E5%90%8C%E6%AD%A5%20%282%29/#_1","title":"\u4ec0\u4e48\u662f\u4fe1\u53f7\u91cf","text":"\u793a\u4f8b\uff1apc-sempc-sem.c <p>\u4ee3\u7801\u793a\u4f8b\uff1a\u4fe1\u53f7\u91cf\u89e3\u51b3\u751f\u4ea7\u8005-\u6d88\u8d39\u8005\u95ee\u9898</p> <p>\u5728\u4efb\u610f\u65f6\u523b\uff0cempty/fill \u7684\u6570\u503c\u5c31\u4ee3\u8868\u4e86\u5f53\u524d\u8fd8\u53ef\u4ee5\u6253\u5370\u5de6\u62ec\u53f7/\u53f3\u62ec\u53f7\u7684\u6570\u91cf\u3002\u800c\u5e0c\u671b\u6253\u5370\u7684\u7ebf\u7a0b\uff0c\u5fc5\u987b\u4ece\u76f8\u5e94\u7684\u888b\u5b50\u91cc\u53d6\u8d70\u4e00\u4e2a\u7403\u3002\u7279\u522b\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u6211\u4eec\u603b\u662f\u628a\u5148\u628a\u62ec\u53f7\u6253\u5370\u51fa\u6765\uff0c\u518d\u5bf9\u76f8\u5e94\u7684\u4fe1\u53f7\u91cf\u6267\u884c V \u64cd\u4f5c\uff0c\u8fd9\u5b9e\u73b0\u4e86\u751f\u4ea7\u8005-\u6d88\u8d39\u8005\u4e4b\u95f4\u7684\u540c\u6b65\u3002</p> <pre><code>#include \"thread.h\"\n#include \"thread-sync.h\"\n\nsem_t fill, empty;\n\nvoid Tproduce() {\n    while (1) {\n        P(&amp;empty);\n        printf(\"(\");\n        V(&amp;fill);\n    }\n}\n\nvoid Tconsume() {\n    while (1) {\n        P(&amp;fill);\n        printf(\")\");\n        V(&amp;empty);\n    }\n}\n\nint main(int argc, char *argv[]) {\n    assert(argc == 2);\n    SEM_INIT(&amp;fill, 0);\n    SEM_INIT(&amp;empty, atoi(argv[1]));\n    for (int i = 0; i &lt; 8; i++) {\n        create(Tproduce);\n        create(Tconsume);\n    }\n}\n</code></pre>"},{"location":"Category/SystemOperation/NJU/10.%20%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%EF%BC%9A%E5%90%8C%E6%AD%A5%20%282%29/#_2","title":"\u4fe1\u53f7\u91cf\u9002\u5408\u89e3\u51b3\u4ec0\u4e48\u95ee\u9898","text":"<p>\u6761\u4ef6\u53d8\u91cf\u5b9e\u73b0 happens-before</p> <p>\u6761\u4ef6\u53d8\u91cf\u5b9e\u73b0\u6bd4\u4fe1\u53f7\u91cf\u8fd8\u662f\u8981\u9ebb\u70e6\u4e00\u70b9\u7684\uff1a</p> <p>B \u5982\u679c\u8fd8\u6ca1\u6267\u884c\u5230 <code>P(s)</code>\uff0c\u90a3\u4e48 A \u53d1\u9001 <code>cond_broadcast</code> \u6216\u8005 <code>cond_signal</code> \u5c31\u4e22\u5931\u4e86\u3002</p> <p>\u8fd8\u9700\u8981\u4e00\u4e2a\u989d\u5916\u7684\u53d8\u91cf\u53bb\u6807\u8bb0\u3002</p> <p> </p>"},{"location":"Category/SystemOperation/NJU/10.%20%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%EF%BC%9A%E5%90%8C%E6%AD%A5%20%282%29/#1-join","title":"1.\u4fe1\u53f7\u91cf\u5b9e\u73b0\u7ebf\u7a0b join","text":"\u793a\u4f8b\uff1ajoin-semjoin-sem.c <p>\u4ee3\u7801\u793a\u4f8b\uff1a\u4fe1\u53f7\u91cf\u5b9e\u73b0\u7ebf\u7a0b join</p> <p>\u4e00\u5bf9 V-P \u64cd\u4f5c\u5f62\u6210\u4e86 happens-before \u5173\u7cfb\uff0c\u4ece\u800c\u5b9e\u73b0 \u201c\u4e00\u4ef6\u4e8b\u7b49\u53e6\u4e00\u4ef6\u4e8b\u5b8c\u6210\u624d\u80fd\u5f00\u59cb\u201d \u7c7b\u578b\u7684\u540c\u6b65\u3002\u7c7b\u4f3c\u5730\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u4fe1\u53f7\u91cf\u5b9e\u73b0\u4efb\u610f\u8ba1\u7b97\u56fe\u7684\u540c\u6b65\u3002\u76f8\u6bd4\u4e8e\u6761\u4ef6\u53d8\u91cf\uff0c\u7531\u4e8e V \u64cd\u4f5c\u81ea\u5e26 count++\uff0c\u56e0\u6b64\u4e0d\u7528\u62c5\u5fc3\u6761\u4ef6\u53d8\u91cf\u4e2d\u5524\u9192\u4e22\u5931\u7684\u60c5\u51b5\u3002</p> <pre><code>#include \"thread.h\"\n#include \"thread-sync.h\"\n\n#define T 4\n#define N 10000000\n\nsem_t done;\nlong sum = 0;\n\nvoid atomic_inc(long *ptr) {\n    asm volatile(\n        \"lock incq %0\"\n        : \"+m\"(*ptr) : : \"memory\"\n    );\n}\n\nvoid Tsum() {\n    for (int i = 0; i &lt; N; i++) {\n        atomic_inc(&amp;sum);\n    }\n    V(&amp;done);\n}\n\nvoid Tprint() {\n    for (int i = 0; i &lt; T; i++) {\n        P(&amp;done);\n    }\n    printf(\"sum = %ld\\n\", sum);\n}\n\nint main() {\n    SEM_INIT(&amp;done, 0);\n    for (int i = 0; i &lt; T; i++) {\n        create(Tsum);\n    }\n    create(Tprint);\n}\n</code></pre>"},{"location":"Category/SystemOperation/NJU/10.%20%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%EF%BC%9A%E5%90%8C%E6%AD%A5%20%282%29/#2","title":"2.\u4fe1\u53f7\u91cf\u5b9e\u73b0\u540c\u6b65\u4e60\u9898","text":"\u793a\u4f8b\uff1afish-semfish-sem.c <p>\u4ee3\u7801\u793a\u4f8b\uff1a\u4fe1\u53f7\u91cf\u5b9e\u73b0\u540c\u6b65\u4e60\u9898</p> <p>\u4efb\u4f55\u5e76\u53d1\u8ba1\u7b97\u4efb\u52a1\u90fd\u53ef\u4ee5\u770b\u4f5c\u8ba1\u7b97\u56fe\u4e0a\u7684\u4e00\u4e2a\u62d3\u6251\u6392\u5e8f (\u8c03\u5ea6)\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u7528\u4fe1\u53f7\u91cf\u5b9e\u73b0 happens-before \u5728\u539f\u5219\u4e0a\u80fd\u591f\u89e3\u51b3\u4efb\u4f55 \u201c\u8c03\u5ea6\u7531\u5b8c\u6210\u4efb\u52a1\u7684\u7ebf\u7a0b\u63a7\u5236\u201d \u7c7b\u578b\u7684\u5e76\u53d1\u540c\u6b65\u95ee\u9898\u3002</p> <pre><code>#include \"thread.h\"\n#include \"thread-sync.h\"\n\n#define LENGTH(arr) (sizeof(arr) / sizeof(arr[0]))\n\nenum { A = 1, B, C, D, E, F, };\n\nstruct rule {\n    int from, ch, to;\n} rules[] = {\n    { A, '&lt;', B },\n    { B, '&gt;', C },\n    { C, '&lt;', D },\n    { A, '&gt;', E },\n    { E, '&lt;', F },\n    { F, '&gt;', D },\n    { D, '_', A },\n};\nint current = A;\nsem_t cont[128];\n\nvoid fish_before(char ch) {\n    P(&amp;cont[(int)ch]);\n\n    // Update state transition\n    for (int i = 0; i &lt; LENGTH(rules); i++) {\n        struct rule *rule = &amp;rules[i];\n        if (rule-&gt;from == current &amp;&amp; rule-&gt;ch == ch) {\n            current = rule-&gt;to;\n        }\n    }\n}\n\nvoid fish_after(char ch) {\nint choices[16], n = 0;\n\n// Find enabled transitions\nfor (int i = 0; i &lt; LENGTH(rules); i++) {\n    struct rule *rule = &amp;rules[i];\n    if (rule-&gt;from == current) {\n        choices[n++] = rule-&gt;ch;\n    }\n}\n\n// Activate a random one\nint c = rand() % n;\n    V(&amp;cont[choices[c]]);\n}\n\nconst char roles[] = \".&lt;&lt;&lt;&lt;&lt;&gt;&gt;&gt;&gt;___\";\n\nvoid fish_thread(int id) {\n    char role = roles[id];\n    while (1) {\n        fish_before(role);\n        putchar(role);  // Not lock-protected\n        fish_after(role);\n    }\n}\n\nint main() {\n    setbuf(stdout, NULL);\n    SEM_INIT(&amp;cont['&lt;'], 1);\n    SEM_INIT(&amp;cont['&gt;'], 0);\n    SEM_INIT(&amp;cont['_'], 0);\n    for (int i = 0; i &lt; strlen(roles); i++)\n        create(fish_thread);\n}\n</code></pre> <p> </p>"},{"location":"Category/SystemOperation/NJU/10.%20%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%EF%BC%9A%E5%90%8C%E6%AD%A5%20%282%29/#_3","title":"\u54f2 \u2642 \u5b66\u5bb6\u5403\u996d\u95ee\u9898","text":""},{"location":"Category/SystemOperation/NJU/10.%20%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%EF%BC%9A%E5%90%8C%E6%AD%A5%20%282%29/#1","title":"1.\u5931\u8d25\u4e0e\u6210\u529f\u7684\u5c1d\u8bd5","text":"<p>\u5931\u8d25\u7684\u5c1d\u8bd5 - \u628a\u4fe1\u53f7\u91cf\u5f53\u4e92\u65a5\u9501\uff1a\u5148\u62ff\u4e00\u628a\u53c9\u5b50\uff0c\u518d\u62ff\u53e6\u4e00\u628a\u53c9\u5b50</p> <p>\u6210\u529f\u7684\u5c1d\u8bd5 (\u4e07\u80fd\u7684\u65b9\u6cd5):</p> <pre><code>#define CAN_EAT (avail[lhs] &amp;&amp; avail[rhs])\nmutex_lock(&amp;mutex);\nwhile (!CAN_EAT)\n  cond_wait(&amp;cv, &amp;mutex);\navail[lhs] = avail[rhs] = false;\nmutex_unlock(&amp;mutex);\n\nmutex_lock(&amp;mutex);\navail[lhs] = avail[rhs] = true;\ncond_broadcast(&amp;cv);\nmutex_unlock(&amp;mutex);\n</code></pre>"},{"location":"Category/SystemOperation/NJU/10.%20%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%EF%BC%9A%E5%90%8C%E6%AD%A5%20%282%29/#2_1","title":"2.\u6210\u529f\u7684\u5c1d\u8bd5\uff1a\u4fe1\u53f7\u91cf","text":"<p>Trick: \u6b7b\u9501\u4f1a\u5728 5 \u4e2a\u54f2\u5b66\u5bb6 \u201c\u540c\u65f6\u5403\u996d\u201d \u65f6\u53d1\u751f</p> <p>\u7834\u574f\u8fd9\u4e2a\u6761\u4ef6\u5373\u53ef</p> <ul> <li>\u4fdd\u8bc1\u4efb\u4f55\u65f6\u5019\u81f3\u591a\u53ea\u6709 4 \u4e2a\u4eba\u53ef\u4ee5\u5403\u996d</li> <li>\u76f4\u89c2\u7406\u89e3\uff1a\u5927\u5bb6\u5148\u4ece\u684c\u4e0a\u9000\u51fa<ul> <li>\u888b\u5b50\u91cc\u6709 4 \u5f20\u5361</li> <li>\u62ff\u5230\u5361\u7684\u53ef\u4ee5\u4e0a\u684c\u5403\u996d (\u62ff\u53c9\u5b50)</li> <li>\u5403\u5b8c\u4ee5\u540e\u628a\u5361\u5f52\u8fd8\u5230\u888b\u5b50</li> </ul> </li> </ul> <p>\u4efb\u610f 4 \u4e2a\u4eba\u60f3\u5403\u996d\uff0c\u603b\u6709\u4e00\u4e2a\u53ef\u4ee5\u62ff\u8d77\u5de6\u53f3\u624b\u7684\u53c9\u5b50</p> <ul> <li>\u6559\u79d1\u4e66\u4e0a\u6709\u53e6\u4e00\u79cd\u89e3\u51b3\u65b9\u6cd5 (lock ordering\uff1b\u4e4b\u540e\u4f1a\u8bb2)</li> </ul> \u793a\u4f8b\uff1apc-semphilosopher.c <p>\u4ee3\u7801\u793a\u4f8b\uff1a\u4fe1\u53f7\u91cf\u89e3\u51b3\u751f\u4ea7\u8005-\u6d88\u8d39\u8005\u95ee\u9898</p> <p>\u5728\u4efb\u610f\u65f6\u523b\uff0cempty/fill \u7684\u6570\u503c\u5c31\u4ee3\u8868\u4e86\u5f53\u524d\u8fd8\u53ef\u4ee5\u6253\u5370\u5de6\u62ec\u53f7/\u53f3\u62ec\u53f7\u7684\u6570\u91cf\u3002\u800c\u5e0c\u671b\u6253\u5370\u7684\u7ebf\u7a0b\uff0c\u5fc5\u987b\u4ece\u76f8\u5e94\u7684\u888b\u5b50\u91cc\u53d6\u8d70\u4e00\u4e2a\u7403\u3002\u7279\u522b\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u6211\u4eec\u603b\u662f\u628a\u5148\u628a\u62ec\u53f7\u6253\u5370\u51fa\u6765\uff0c\u518d\u5bf9\u76f8\u5e94\u7684\u4fe1\u53f7\u91cf\u6267\u884c V \u64cd\u4f5c\uff0c\u8fd9\u5b9e\u73b0\u4e86\u751f\u4ea7\u8005-\u6d88\u8d39\u8005\u4e4b\u95f4\u7684\u540c\u6b65\u3002</p> <pre><code>#include \"thread.h\"\n#include \"thread-sync.h\"\n\n#define N 5\n\nsem_t table, avail[N];\n\nvoid Tphilosopher(int id) {\n  int lhs = (id + N - 1) % N;\n  int rhs = id % N;\n  while (1) {\n    // Come to table\n    P(&amp;table);\n\n    P(&amp;avail[lhs]);\n    printf(\"+ %d by T%d\\n\", lhs, id);\n    P(&amp;avail[rhs]);\n    printf(\"+ %d by T%d\\n\", rhs, id);\n\n    // Eat\n\n    printf(\"- %d by T%d\\n\", lhs, id);\n    printf(\"- %d by T%d\\n\", rhs, id);\n    V(&amp;avail[lhs]);\n    V(&amp;avail[rhs]);\n\n    // Leave table\n    V(&amp;table);\n  }\n}\n\nint main() {\n  SEM_INIT(&amp;table, N - 1);\n  for (int i = 0; i &lt; N; i++) {\n    SEM_INIT(&amp;avail[i], 1);\n  }\n  for (int i = 0; i &lt; N; i++) {\n    create(Tphilosopher);\n  }\n}\n</code></pre>"},{"location":"Category/SystemOperation/NJU/10.%20%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%EF%BC%9A%E5%90%8C%E6%AD%A5%20%282%29/#3","title":"3.\u5206\u5e03\u4e0e\u96c6\u4e2d","text":"<p>\u201cLeader/follower\u201d - \u6709\u4e00\u4e2a\u96c6\u4e2d\u7684 \u201c\u603b\u63a7\u201d\uff0c\u800c\u975e \u201c\u5404\u81ea\u534f\u8c03\u201d</p> <p>\u5728\u53ef\u9760\u7684\u6d88\u606f\u673a\u5236\u4e0a\u5b9e\u73b0\u4efb\u52a1\u5206\u6d3e</p> <ul> <li>Leader \u4e32\u884c\u5904\u7406\u6240\u6709\u8bf7\u6c42 (\u4f8b\u5982\uff1a\u6761\u4ef6\u53d8\u91cf\u670d\u52a1)</li> </ul> <p><pre><code>void Tphilosopher(int id) {\n  send(Twaiter, id, EAT);\n  receive(Twatier); // \u7b49\u5f85 waiter \u628a\u4e24\u628a\u53c9\u5b50\u9012\u7ed9\u54f2\u5b66\u5bb6\n  eat();\n  send(Twaiter, id, DONE); // \u5f52\u8fd8\u53c9\u5b50\n}\n\nvoid Twaiter() {\n  while (1) {\n    (id, status) = receive(Any);\n    switch (status) { ... }\n  }\n}\n</code></pre> \u4f60\u53ef\u80fd\u4f1a\u89c9\u5f97\uff0c\u7ba1\u53c9\u5b50\u7684\u4eba\u662f\u6027\u80fd\u74f6\u9888</p> <ul> <li>\u4e00\u5927\u684c\u4eba\u5403\u996d\uff0c\u6bcf\u4e2a\u4eba\u90fd\u53eb\u670d\u52a1\u5458\u7684\u611f\u89c9</li> <li>Premature optimization is the root of all evil (D. E. Knuth)</li> </ul> <p>\u629b\u5f00 workload \u8c08\u4f18\u5316\u5c31\u662f\u800d\u6d41\u6c13 </p> <ul> <li>\u5403\u996d\u7684\u65f6\u95f4\u901a\u5e38\u8fdc\u8fdc\u5927\u4e8e\u8bf7\u6c42\u670d\u52a1\u5458\u7684\u65f6\u95f4</li> <li>\u5982\u679c\u4e00\u4e2a manager \u641e\u4e0d\u5b9a\uff0c\u53ef\u4ee5\u5206\u591a\u4e2a (fast/slow path)<ul> <li>\u628a\u7cfb\u7edf\u8bbe\u8ba1\u597d\uff0c\u96c6\u4e2d\u7ba1\u7406\u53ef\u4ee5\u4e0d\u662f\u74f6\u9888\uff1aThe Google File System (SOSP'03) \u5f00\u542f\u5927\u6570\u636e\u65f6\u4ee3</li> </ul> </li> </ul> <p></p>"},{"location":"Category/SystemOperation/NJU/10.%20%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%EF%BC%9A%E5%90%8C%E6%AD%A5%20%282%29/#take-away-messages","title":"Take-away Messages","text":"<p>\u4fe1\u53f7\u91cf\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u6761\u4ef6\u53d8\u91cf\uff0c\u800c\u4e14\u53ef\u4ee5\u5728\u64cd\u4f5c\u7cfb\u7edf\u4e0a\u88ab\u9ad8\u6548\u5730\u5b9e\u73b0\uff0c\u907f\u514d broadcast \u5524\u9192\u7684\u6d6a\u8d39\uff1a</p> <p><pre><code>void P() {\n  WAIT_UNTIL(count &gt; 0) {\n    count--;\n  }\n}\nvoid V() {\n  count++;\n}\n</code></pre> \u540c\u65f6\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u628a\u4fe1\u53f7\u91cf\u7406\u89e3\u6210\u888b\u5b50\u91cc\u7684\u7403\uff0c\u6216\u662f\u7ba1\u7406\u6e38\u6cf3\u6c60\u7684\u624b\u73af\uff0c\u56e0\u6b64\u5b83\u5728\u7b26\u5408\u8fd9\u4e2a\u62bd\u8c61\u65f6\uff0c\u80fd\u591f\u5e26\u6765\u4f18\u96c5\u7684\u4ee3\u7801\u3002</p> <p>\u66f4\u91cd\u8981\u7684\u662f\uff0c\u4f46\u51e1\u6211\u4eec\u80fd\u5c06\u4efb\u52a1\u5f88\u597d\u5730\u5206\u89e3\u6210\u5c11\u91cf\u4e32\u884c\u7684\u90e8\u5206\u548c\u7edd\u5927\u90e8\u5206 \u201c\u7ebf\u7a0b\u5c40\u90e8\u201d \u7684\u8ba1\u7b97\uff0c\u90a3\u4e48\u751f\u4ea7\u8005-\u6d88\u8d39\u8005\u548c\u8ba1\u7b97\u56fe\u6a21\u578b\u5c31\u80fd\u5b9e\u73b0\u6709\u6548\u7684\u5e76\u884c\u3002\u7cbe\u5fc3\u8bbe\u8ba1\u7684\u5206\u5e03\u5f0f\u540c\u6b65\u534f\u8bae\u4e0d\u4ec5\u53ef\u80fd\u5b58\u5728\u6b63\u786e\u6027\u6f0f\u6d1e\uff0c\u5e26\u6765\u7684\u6027\u80fd\u6536\u76ca\u5f88\u53ef\u80fd\u4e5f\u662f\u5fae\u4e4e\u5176\u5fae\u7684\u3002</p> <ol> <li> <p>\u64cd\u4f5c\u7cfb\u7edf\uff1a\u8bbe\u8ba1\u4e0e\u5b9e\u73b0 (2023 \u6625\u5b63\u5b66\u671f) \u21a9</p> </li> <li> <p>10. \u5e76\u53d1\u63a7\u5236\uff1a\u540c\u6b65 (2) \u21a9</p> </li> <li> <p>\u540c\u6b65\uff1a\u4fe1\u53f7\u91cf\u4e0e\u54f2\u2642\u5b66\u5bb6\u5403\u996d\u95ee\u9898 (\u4fe1\u53f7\u91cf\u7684\u6b63\u786e\u6253\u5f00\u65b9\u5f0f) [\u5357\u4eac\u5927\u5b662023\u64cd\u4f5c\u7cfb\u7edf-P10] (\u848b\u708e\u5ca9) \u21a9</p> </li> </ol>"},{"location":"Category/SystemOperation/NJU/12.%20%E7%9C%9F%E5%AE%9E%E4%B8%96%E7%95%8C%E7%9A%84%E5%B9%B6%E5%8F%91%20Bug/","title":"12. \u771f\u5b9e\u4e16\u754c\u7684\u5e76\u53d1 Bug","text":""},{"location":"Category/SystemOperation/NJU/12.%20%E7%9C%9F%E5%AE%9E%E4%B8%96%E7%95%8C%E7%9A%84%E5%B9%B6%E5%8F%91%20Bug/#deadlock","title":"\u6b7b\u9501 (Deadlock)","text":"model checker deadlock-aa.py<pre><code>def main():\n  heap.table = '\u2705'\n\n  # 1st lock()\n  while True:\n    seen = heap.table\n    heap.table = '\u274c'\n    sys_sched()\n    if seen == '\u2705':\n      break\n\n  # 2nd lock()\n  while True:\n    seen = heap.table\n    heap.table = '\u274c'\n    sys_sched()\n    if seen == '\u2705':\n      break\n</code></pre>"},{"location":"Category/SystemOperation/NJU/12.%20%E7%9C%9F%E5%AE%9E%E4%B8%96%E7%95%8C%E7%9A%84%E5%B9%B6%E5%8F%91%20Bug/#_1","title":"\u6570\u636e\u7ade\u4e89","text":"<p>Warning</p> <p>\u6240\u4ee5\u4e0d\u4e0a\u9501\u4e0d\u5c31\u6ca1\u6709\u6b7b\u9501\u4e86\u5417\uff1f</p> <p> </p> <p>Since C11: data race is undefined behavior</p> \u793a\u4f8b\uff1apetersonpeterson.c <p>\u4ee3\u7801\u793a\u4f8b\uff1aPeterson \u7b97\u6cd5\u5b9e\u73b0</p> <p>\u5728 <code>C/C++</code> \u6807\u51c6\u4e2d\uff0c\u6570\u636e\u7ade\u4e89\u662f <code>undefined behavior</code>\u3002\u5f00\u53d1\u8005\u6709\u8d23\u4efb\u4fdd\u8bc1 <code>conflict</code> \u7684\u5185\u5b58\u8bbf\u95ee\u4e4b\u95f4\u7684 <code>happens-before</code> \u5173\u7cfb\uff0c\u6216\u662f\u4f7f\u7528\u539f\u5b50\u6307\u4ee4\u3002\u867d\u7136\u6211\u4eec\u7684\u5b9e\u73b0\u4f7f\u7528\u4e86 <code>__sync_synchronize</code>\uff0c\u5728\u7f16\u8bd1\u5668\u548c <code>x86</code> \u5904\u7406\u5668\u7684 <code>specification</code> \u4e0d\u53d1\u751f\u6539\u53d8\u7684\u524d\u63d0\u4e0b\uff0c\u4ee3\u7801\u672c\u8eab\u662f\u6b63\u786e\u7684\uff0c\u4f46\u8fd9\u4e0d\u662f\u9f13\u52b1\u7684\u7f16\u7a0b\u65b9\u6cd5\u3002</p> <pre><code>#include \"thread.h\"\n\n#define A 1\n#define B 2\n\n#define BARRIER __sync_synchronize()\n\natomic_int nested;\natomic_long count;\n\nvoid critical_section() {\n    long cnt = atomic_fetch_add(&amp;count, 1);\n    int i = atomic_fetch_add(&amp;nested, 1) + 1;\n    if (i != 1) {\n        printf(\"%d threads in the critical section @ count=%ld\\n\", i, cnt);\n        assert(0);\n    }\n    atomic_fetch_add(&amp;nested, -1);\n}\n\nint volatile x = 0, y = 0, turn;\n\nvoid TA() {\n    while (1) {\n        x = 1;                   BARRIER;\n        turn = B;                BARRIER; // &lt;- this is critcal for x86\n        while (1) {\n        if (!y) break;         BARRIER;\n        if (turn != B) break;  BARRIER;\n        }\n        critical_section();\n        x = 0;                   BARRIER;\n    }\n}\n\nvoid TB() {\n    while (1) {\n        y = 1;                   BARRIER;\n        turn = A;                BARRIER;\n        while (1) {\n        if (!x) break;         BARRIER;\n        if (turn != A) break;  BARRIER;\n        }\n        critical_section();\n        y = 0;                   BARRIER;\n    }\n}\n\nint main() {\n    create(TA);\n    create(TB);\n}\n</code></pre>"},{"location":"Category/SystemOperation/NJU/12.%20%E7%9C%9F%E5%AE%9E%E4%B8%96%E7%95%8C%E7%9A%84%E5%B9%B6%E5%8F%91%20Bug/#_2","title":"\u539f\u5b50\u6027\u548c\u987a\u5e8f\u8fdd\u53cd","text":"<p>Learning from mistakes - A comprehensive study on real world concurrency bug characteristics</p> <p>TOCTTOU vulnerabilities in UNIX-style file systems: An anatomical study (FAST'05)</p> data race model checkertocttou.py <p>\u201c\u539f\u5b50\u6027\u201d \u4e00\u76f4\u662f\u5f00\u53d1\u8005\u5e0c\u671b\u62e5\u6709\u7684\u2014\u2014\u5bf9\u7f16\u7a0b\u8005\u800c\u8a00\uff0c\u7406\u60f3\u60c5\u51b5\u662f\u4e00\u6bb5\u4ee3\u7801\u7684\u6267\u884c\u8981\u4e48\u770b\u8d77\u6765\u5728\u77ac\u95f4\u5168\u90e8\u5b8c\u6210\uff0c\u8981\u4e48\u597d\u50cf\u5b8c\u5168\u6ca1\u6709\u6267\u884c\u8fc7\u3002\u4ee3\u7801\u4e2d\u7684\u526f\u4f5c\u7528\uff1a\u5171\u4eab\u5185\u5b58\u5199\u5165\u3001\u6587\u4ef6\u7cfb\u7edf\u5199\u5165\u7b49\uff0c\u5219\u90fd\u662f\u5b9e\u73b0\u539f\u5b50\u6027\u7684\u969c\u788d\u3002\u56e0\u4e3a \u201c\u539f\u5b50\u6027\u201d \u5982\u6b64\u8bf1\u4eba\uff0c\u5728\u8ba1\u7b97\u673a\u786c\u4ef6/\u7cfb\u7edf\u5c42\u9762\u63d0\u4f9b\u539f\u5b50\u6027\u7684\u5c1d\u8bd5\u4e00\u76f4\u90fd\u6ca1\u6709\u505c\u6b62\u8fc7\uff1a\u4ece\u6570\u636e\u5e93\u4e8b\u52a1 (transactions, tx) \u5230\u8f6f\u4ef6\u548c\u786c\u4ef6\u652f\u6301\u7684 Transactional Memory \u201can idea ahead its time\u201d \u5230 Operating System Transactions\uff0c\u76f4\u5230\u4eca\u5929\u6211\u4eec\u4f9d\u7136\u6ca1\u6709\u6bcf\u4e2a\u7a0b\u5e8f\u5458\u90fd\u5782\u624b\u53ef\u5f97\u7684\u53ef\u9760\u539f\u5b50\u6027\u4fdd\u969c\u3002</p> <p>\u800c\u4fdd\u8bc1\u7a0b\u5e8f\u7684\u6267\u884c\u987a\u5e8f\u5c31\u66f4\u56f0\u96be\u4e86\u3002Managed runtime \u5b9e\u73b0\u81ea\u52a8\u5185\u5b58\u7ba1\u7406\u3001channel \u5b9e\u73b0\u7ebf\u7a0b\u95f4\u901a\u4fe1\u7b49\uff0c\u90fd\u662f\u51cf\u5c11\u7a0b\u5e8f\u5458\u72af\u9519\u7684\u624b\u6bb5\u3002</p> <pre><code>def main():\n    sys_bwrite('/etc/passwd', ('plain', 'secret...'))\n    sys_bwrite('file', ('plain', 'data...'))\n\n    pid = sys_fork()\n    sys_sched()\n\n    if pid == 0:\n        # attacker: symlink file -&gt; /etc/passwd\n        sys_bwrite('file', ('symlink', '/etc/passwd'))\n    else:\n        # sendmail (root): write to plain file\n        filetype, contents = sys_bread('file')  # for check\n        if filetype == 'plain':\n        # TOCTTOU interval\n        sys_sched()\n        filetype, contents = sys_bread('file')  # for use\n        match filetype:\n            case 'symlink': filename = contents\n            case 'plain': filename = 'file'\n        sys_bwrite(filename, 'mail')\n        sys_write(f'{filename} written')\n        else:\n        sys_write('rejected')\n\n    # Outputs:\n    # /etc/passwd written\n    # file written\n    # rejected\n</code></pre>"},{"location":"Category/SystemOperation/NJU/12.%20%E7%9C%9F%E5%AE%9E%E4%B8%96%E7%95%8C%E7%9A%84%E5%B9%B6%E5%8F%91%20Bug/#take-away-messages","title":"Take-away Messages","text":"<p>\u4eba\u7c7b\u672c\u8d28\u4e0a\u662f sequential creature\uff0c\u56e0\u6b64\u603b\u662f\u901a\u8fc7 \u201c\u5757\u7684\u987a\u5e8f\u6267\u884c\u201d \u8fd9\u4e00\u7b80\u5316\u6a21\u578b\u53bb\u7406\u89e3\u5e76\u53d1\u7a0b\u5e8f\uff0c\u4e5f\u76f8\u5e94\u6709\u4e86\u4e24\u79cd\u7c7b\u578b\u7684\u5e76\u53d1 bugs\uff1a</p> <ul> <li>Atomicity violation\uff0c\u672c\u5e94\u539f\u5b50\u5b8c\u6210\u4e0d\u88ab\u6253\u65ad\u7684\u4ee3\u7801\u88ab\u6253\u65ad</li> <li>Order violation\uff0c\u672c\u5e94\u6309\u67d0\u4e2a\u987a\u5e8f\u5b8c\u6210\u7684\u672a\u80fd\u88ab\u6b63\u786e\u540c\u6b65</li> </ul> <p>\u4e0e\u8fd9\u4e24\u7c7b bugs \u5173\u8054\u7684\u4e00\u4e2a\u91cd\u8981\u95ee\u9898\u662f\u6570\u636e\u7ade\u4e89\uff0c\u5373\u4e24\u4e2a\u7ebf\u7a0b\u540c\u65f6\u8bbf\u95ee\u540c\u4e00\u5185\u5b58\uff0c\u4e14\u81f3\u5c11\u6709\u4e00\u4e2a\u662f\u5199\u3002\u6570\u636e\u7ade\u4e89\u975e\u5e38\u5371\u9669\uff0c\u56e0\u6b64\u6211\u4eec\u5728\u7f16\u7a0b\u65f6\u8981\u5c3d\u529b\u907f\u514d\u3002</p> <ol> <li> <p>\u64cd\u4f5c\u7cfb\u7edf\uff1a\u8bbe\u8ba1\u4e0e\u5b9e\u73b0 (2023 \u6625\u5b63\u5b66\u671f) \u21a9</p> </li> <li> <p>12. \u771f\u5b9e\u4e16\u754c\u7684\u5e76\u53d1 Bug \u21a9</p> </li> <li> <p>\u5e76\u53d1 Bug \u5206\u7c7b\uff08\u6b7b\u9501\u3001\u6570\u636e\u7ade\u4e89\u3001\u539f\u5b50\u6027/\u987a\u5e8f\u8fdd\u53cd\uff09\u5357\u4eac\u5927\u5b662023\u64cd\u4f5c\u7cfb\u7edf-P12 (\u848b\u708e\u5ca9) \u21a9</p> </li> </ol>"},{"location":"Category/SystemOperation/NJU/13.%20%E5%B9%B6%E5%8F%91%20Bug%20%E7%9A%84%E5%BA%94%E5%AF%B9/","title":"13. \u5e76\u53d1 Bug \u7684\u5e94\u5bf9","text":""},{"location":"Category/SystemOperation/NJU/13.%20%E5%B9%B6%E5%8F%91%20Bug%20%E7%9A%84%E5%BA%94%E5%AF%B9/#lock-ordering","title":"Lock ordering","text":""},{"location":"Category/SystemOperation/NJU/13.%20%E5%B9%B6%E5%8F%91%20Bug%20%E7%9A%84%E5%BA%94%E5%AF%B9/#1","title":"1.\u56de\u987e\uff1a\u6b7b\u9501\u4ea7\u751f\u7684\u5fc5\u8981\u6761\u4ef6","text":"<p>System deadlocks (1971)\uff1a\u6b7b\u9501\u4ea7\u751f\u7684\u56db\u4e2a\u5fc5\u8981\u6761\u4ef6</p> <p>\u7528 \u201c\u8d44\u6e90\u201d \u6765\u63cf\u8ff0</p> <ul> <li> <p>\u72b6\u6001\u673a\u89c6\u89d2\uff1a\u5c31\u662f \u201c\u5f53\u524d\u72b6\u6001\u4e0b\u6301\u6709\u7684\u9501 (\u6821\u56ed\u5361/\u7403)\u201d</p> </li> <li> <p>Mutual-exclusion - \u4e00\u5f20\u6821\u56ed\u5361\u53ea\u80fd\u88ab\u4e00\u4e2a\u4eba\u62e5\u6709</p> </li> <li>Wait-for - \u4e00\u4e2a\u4eba\u7b49\u5176\u4ed6\u6821\u56ed\u5361\u65f6\uff0c\u4e0d\u4f1a\u91ca\u653e\u5df2\u6709\u7684\u6821\u56ed\u5361</li> <li>No-preemption - \u4e0d\u80fd\u62a2\u593a\u4ed6\u4eba\u7684\u6821\u56ed\u5361</li> <li>Circular-chain - \u5f62\u6210\u6821\u56ed\u5361\u7684\u5faa\u73af\u7b49\u5f85\u5173\u7cfb</li> </ul>"},{"location":"Category/SystemOperation/NJU/13.%20%E5%B9%B6%E5%8F%91%20Bug%20%E7%9A%84%E5%BA%94%E5%AF%B9/#2-contd","title":"2.\u5e94\u5bf9\u6b7b\u9501\uff1a\u6b7b\u9501\u4ea7\u751f\u7684\u5fc5\u8981\u6761\u4ef6 (cont'd)","text":"<p>\u7ad9\u7740\u8bf4\u8bdd\u4e0d\u8170\u75bc\u7684\u6559\u79d1\u4e66\uff1a</p> <p>\u201c\u7406\u89e3\u4e86\u6b7b\u9501\u7684\u539f\u56e0\uff0c\u5c24\u5176\u662f\u4ea7\u751f\u6b7b\u9501\u7684\u56db\u4e2a\u5fc5\u8981\u6761\u4ef6\uff0c\u5c31\u53ef\u4ee5\u6700\u5927\u53ef\u80fd\u5730\u907f\u514d\u3001\u9884\u9632\u548c\u89e3\u9664\u6b7b\u9501\u3002\u6240\u4ee5\uff0c\u5728\u7cfb\u7edf\u8bbe\u8ba1\u3001\u8fdb\u7a0b\u8c03\u5ea6\u7b49\u65b9\u9762\u6ce8\u610f\u5982\u4f55\u4e0d\u8ba9\u8fd9\u56db\u4e2a\u5fc5\u8981\u6761\u4ef6\u6210\u7acb\uff0c\u5982\u4f55\u786e\u5b9a\u8d44\u6e90\u7684\u5408\u7406\u5206\u914d\u7b97\u6cd5\uff0c\u907f\u514d\u8fdb\u7a0b\u6c38\u4e45\u5360\u636e\u7cfb\u7edf\u8d44\u6e90\u3002\u6b64\u5916\uff0c\u4e5f\u8981\u9632\u6b62\u8fdb\u7a0b\u5728\u5904\u4e8e\u7b49\u5f85\u72b6\u6001\u7684\u60c5\u51b5\u4e0b\u5360\u7528\u8d44\u6e90\u3002\u56e0\u6b64\uff0c\u5bf9\u8d44\u6e90\u7684\u5206\u914d\u8981\u7ed9\u4e88\u5408\u7406\u7684\u89c4\u5212\u3002\u201d</p> <p>\u4e0d\u80fd\u79f0\u4e3a\u662f\u4e00\u4e2a\u5408\u7406\u7684 argument</p> <p>\u5bf9\u4e8e\u73a9\u5177\u7cfb\u7edf/\u6a21\u578b</p> <ul> <li>\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u8bc1\u660e\u7cfb\u7edf\u662f deadlock-free \u7684</li> </ul> <p>\u5bf9\u4e8e\u771f\u6b63\u7684\u590d\u6742\u7cfb\u7edf</p> <ul> <li>Bullshit</li> </ul>"},{"location":"Category/SystemOperation/NJU/13.%20%E5%B9%B6%E5%8F%91%20Bug%20%E7%9A%84%E5%BA%94%E5%AF%B9/#3","title":"3.\u5982\u4f55\u5728\u5b9e\u9645\u7cfb\u7edf\u4e2d\u907f\u514d\u6b7b\u9501\uff1f","text":"<p>\u56db\u4e2a\u6761\u4ef6\u4e2d\u6700\u5bb9\u6613\u8fbe\u6210\u7684 \u907f\u514d\u5faa\u73af\u7b49\u5f85</p> <p>Lock ordering</p> <ul> <li>\u4efb\u610f\u65f6\u523b\u7cfb\u7edf\u4e2d\u7684\u9501\u90fd\u662f\u6709\u9650\u7684</li> <li>\u4e25\u683c\u6309\u7167\u56fa\u5b9a\u7684\u987a\u5e8f\u83b7\u5f97\u6240\u6709\u9501 (Lock Ordering)\uff0c\u5c31\u53ef\u4ee5\u6d88\u706d\u5faa\u73af\u7b49\u5f85<ul> <li>\u201c\u5728\u4efb\u610f\u65f6\u523b\u83b7\u5f97 \u201c\u6700\u9760\u540e\u201d \u9501\u7684\u7ebf\u7a0b\u603b\u662f\u53ef\u4ee5\u7ee7\u7eed\u6267\u884c\u201d</li> </ul> </li> <li>\u4f8b\u5b50\uff1a\u4fee\u590d\u54f2\u5b66\u5bb6\u5403\u996d\u95ee\u9898</li> </ul> \u793a\u4f8b\uff1alock-orderinglock-ordering.c <p>\u4ee3\u7801\u793a\u4f8b\uff1a\u4f7f\u7528 Lock Ordering \u89e3\u51b3\u54f2\u5b66\u5bb6\u5403\u996d\u95ee\u9898</p> <p>\u53ea\u8981\u6bcf\u4e2a\u7ebf\u7a0b\u4e0a\u9501\u7684\u987a\u5e8f\u80fd\u88ab\u6392\u6210\u4e00\u4e2a\u5168\u5e8f\uff0c\u5728\u4efb\u4f55\u65f6\u5019\uff0c\u83b7\u5f97 \u201c\u6700\u540e\u4e00\u628a\u9501\u201d \u7684\u7ebf\u7a0b\u5c31\u603b\u662f\u80fd\u7ee7\u7eed\u6267\u884c (\u5e76\u5728\u672a\u6765\u91ca\u653e\u9501)\u3002</p> <pre><code>#include \"thread.h\"\n#include \"thread-sync.h\"\n\n#define N 5\n\nsem_t avail[N];\n\nvoid Tphilosopher(int id) {\n  int lhs = (id + N - 1) % N;\n  int rhs = id % N;\n\n  // Enforce lock ordering\n  if (lhs &gt; rhs) {\n    int tmp = lhs;\n    lhs = rhs;\n    rhs = tmp;\n  }\n\n  while (1) {\n    P(&amp;avail[lhs]);\n    printf(\"+ %d by T%d\\n\", lhs, id);\n    P(&amp;avail[rhs]);\n    printf(\"+ %d by T%d\\n\", rhs, id);\n\n    // Eat\n\n    printf(\"- %d by T%d\\n\", lhs, id);\n    printf(\"- %d by T%d\\n\", rhs, id);\n    V(&amp;avail[lhs]);\n    V(&amp;avail[rhs]);\n  }\n}\n\nint main() {\n  for (int i = 0; i &lt; N; i++) {\n    SEM_INIT(&amp;avail[i], 1);\n  }\n  for (int i = 0; i &lt; N; i++) {\n    create(Tphilosopher);\n  }\n}\n</code></pre>"},{"location":"Category/SystemOperation/NJU/13.%20%E5%B9%B6%E5%8F%91%20Bug%20%E7%9A%84%E5%BA%94%E5%AF%B9/#4lock-ordering","title":"4.Lock Ordering: \u5e94\u7528","text":"<p>Emmm\u2026\u2026</p> <p>Textbooks will tell you that if you always lock in the same order, you will never get this kind of deadlock. Practice will tell you that this approach doesn't scale: when I create a new lock, I don't understand enough of the kernel to figure out where in the 5000 lock hierarchy it will fit.</p> <p>The best locks are encapsulated: they never get exposed in headers, and are never held around calls to non-trivial functions outside the same file. You can read through this code and see that it will never deadlock, because it never tries to grab another lock while it has that one. People using your code don't even need to know you are using a lock.</p> <p>\u2014\u2014 Unreliable Guide to Locking by Rusty Russell</p>"},{"location":"Category/SystemOperation/NJU/13.%20%E5%B9%B6%E5%8F%91%20Bug%20%E7%9A%84%E5%BA%94%E5%AF%B9/#_1","title":"\u9632\u5fa1\u6027\u7f16\u7a0b","text":"<p>\u5373\u4fbf\u662f\u6700\u5bb9\u6613\u53d1\u73b0\u3001\u6700\u5bb9\u6613\u9884\u9632\u7684\u6b7b\u9501\u7c7b bug\uff0c\u5728\u5b9e\u9645\u7684\u590d\u6742\u7cfb\u7edf\u4e2d\uff0c\u60f3\u8981\u4f7f\u7a0b\u5e8f\u5458\u80fd\u591f\u6b63\u786e\u9075\u5b88\u7f16\u7a0b\u89c4\u8303\uff0c\u4e5f\u662f\u5341\u5206\u56f0\u96be\u7684\u3002\u56e0\u6b64\uff0c\u5bf9\u4e8e\u590d\u6742\u7684\u7cfb\u7edf\uff0c\u6211\u4eec\u5fc5\u987b\u603b\u662f\u5047\u8bbe\u7a0b\u5e8f\u5458\u4f1a\u82b1\u5f0f\u72af\u9519\uff0c\u6700\u7ec8\u624d\u80fd\u5f97\u5230\u9ad8\u8d28\u91cf\u7684\u7cfb\u7edf\u3002</p>"},{"location":"Category/SystemOperation/NJU/13.%20%E5%B9%B6%E5%8F%91%20Bug%20%E7%9A%84%E5%BA%94%E5%AF%B9/#1_1","title":"1.\u56de\u987e\uff1a\u8c03\u8bd5\u7406\u8bba","text":"<p>\u7a0b\u5e8f = \u7269\u7406\u4e16\u754c\u8fc7\u7a0b\u5728\u4fe1\u606f\u4e16\u754c\u4e2d\u7684\u6295\u5f71</p> <p>Bug = \u8fdd\u53cd\u7a0b\u5e8f\u5458\u5bf9 \u201c\u7269\u7406\u4e16\u754c\u201d \u7684\u5047\u8bbe\u548c\u7ea6\u675f</p> <p>Bug \u8fdd\u53cd\u4e86\u7a0b\u5e8f\u7684 specification</p> <ul> <li>\u8be5\u53d1\u751f\u7684\u5fc5\u987b\u53d1\u751f</li> <li>\u4e0d\u8be5\u53d1\u751f\u7684\u4e0d\u80fd\u53d1\u751f</li> </ul> <p>Fault \u2192 Error \u2192 Failure</p>"},{"location":"Category/SystemOperation/NJU/13.%20%E5%B9%B6%E5%8F%91%20Bug%20%E7%9A%84%E5%BA%94%E5%AF%B9/#2-bugs","title":"2.\u7f16\u7a0b\u8bed\u8a00\u4e0e Bugs","text":"<p>\u7f16\u8bd1\u5668/\u7f16\u7a0b\u8bed\u8a00</p> <p>\u53ea\u7ba1 \u201c\u7ffb\u8bd1\u201d \u4ee3\u7801\uff0c\u4e0d\u7ba1\u548c\u5b9e\u9645\u9700\u6c42 (\u89c4\u7ea6) \u662f\u5426\u5339\u914d</p> <ul> <li>\u201c\u5c71\u5be8\u652f\u4ed8\u5b9d\u201d \u4e2d\u7684\u4f59\u989d balance<ul> <li>\u6b63\u5e38\u4eba\u770b\u5230 0 \u2192 18446744073709551516 \u90fd\u8ba4\u4e3a \u201c\u8fd9\u4ef6\u4e8b\u4e0d\u5bf9\u201d (\u201cbalance\u201d \u81ea\u5e26 no-underflow \u7684\u542b\u4e49)</li> </ul> </li> </ul> <p>\u600e\u4e48\u624d\u80fd\u7f16\u5199\u51fa \u201c\u6b63\u786e\u201d (\u7b26\u5408 specification) \u7684\u7a0b\u5e8f\uff1f</p> <ul> <li>\u8bc1\u660e\uff1aAnnotation verifier (Dafny), Refinement types</li> <li>\u63a8\u6d4b\uff1aSpecification mining (Daikon)</li> <li>\u6784\u9020\uff1aProgram sketching</li> <li>\u7f16\u7a0b\u8bed\u8a00\u7684\u5386\u53f2\u548c\u672a\u6765<ul> <li>\u673a\u5668\u8bed\u8a00 \u2192 \u6c47\u7f16\u8bed\u8a00 \u2192 \u9ad8\u7ea7\u8bed\u8a00 \u2192 \u81ea\u7136\u7f16\u7a0b\u8bed\u8a00</li> </ul> </li> </ul>"},{"location":"Category/SystemOperation/NJU/13.%20%E5%B9%B6%E5%8F%91%20Bug%20%E7%9A%84%E5%BA%94%E5%AF%B9/#3_1","title":"3.\u56de\u5230\u73b0\u5b9e","text":"<p>\u4eca\u5929 (\u88ab\u8feb) \u7684\u89e3\u51b3\u65b9\u6cd5</p> <ul> <li>\u867d\u7136\u4e0d\u592a\u613f\u610f\u627f\u8ba4\uff0c\u4f46 \u59cb\u7ec8\u5047\u8bbe\u81ea\u5df1\u7684\u4ee3\u7801\u662f\u9519\u7684</li> <li>\u56e0\u4e3a\u673a\u5668\u6c38\u8fdc\u662f\u5bf9\u7684</li> </ul> <p>\u7136\u540e\u5462\uff1f</p> <ul> <li>\u9996\u5148\uff0c\u505a\u597d\u6d4b\u8bd5</li> <li>\u68c0\u67e5\u54ea\u91cc\u9519\u4e86</li> <li>\u518d\u68c0\u67e5\u54ea\u91cc\u9519\u4e86</li> <li>\u518d\u518d\u68c0\u67e5\u54ea\u91cc\u9519\u4e86<ul> <li>\u201c\u9632\u5fa1\u6027\u7f16\u7a0b\u201d</li> <li>\u628a\u4efb\u4f55\u4f60\u8ba4\u4e3a\u53ef\u80fd \u201c\u4e0d\u5bf9\u201d \u7684\u60c5\u51b5\u90fd\u68c0\u67e5\u4e00\u904d</li> </ul> </li> </ul>"},{"location":"Category/SystemOperation/NJU/13.%20%E5%B9%B6%E5%8F%91%20Bug%20%E7%9A%84%E5%BA%94%E5%AF%B9/#4","title":"4.\u9632\u5fa1\u6027\u7f16\u7a0b\uff1a\u5b9e\u8df5","text":"<p>\u628a\u7a0b\u5e8f\u9700\u8981\u6ee1\u8db3\u7684\u6761\u4ef6\u7528 assert \u8868\u8fbe\u51fa\u6765\u3002</p> <p>\u53ca\u65e9\u68c0\u67e5\u3001\u53ca\u65e9\u62a5\u544a\u3001\u53ca\u65e9\u4fee\u590d</p> <ul> <li>Peterson \u7b97\u6cd5\u4e2d\u7684\u4e34\u754c\u533a\u8ba1\u6570\u5668 (assert(nest == 1);)</li> <li>\u4e8c\u53c9\u6811\u7684\u65cb\u8f6c(assert(p-&gt;parent-&gt;left == p || p-&gt;parent-&gt;right == p);)</li> <li>AA-Deadlock \u7684\u68c0\u67e5<ul> <li>if (holding(&amp;lk)) panic();</li> <li>xv6 spinlock \u5b9e\u73b0\u793a\u4f8b</li> </ul> </li> </ul>"},{"location":"Category/SystemOperation/NJU/13.%20%E5%B9%B6%E5%8F%91%20Bug%20%E7%9A%84%E5%BA%94%E5%AF%B9/#5","title":"5.\u9632\u5fa1\u6027\u7f16\u7a0b\u548c\u89c4\u7ea6\u7ed9\u6211\u4eec\u7684\u542f\u53d1","text":"<p>\u4f60\u77e5\u9053\u5f88\u591a\u53d8\u91cf\u7684\u542b\u4e49</p> <pre><code>#define CHECK_INT(x, cond) \\\n  ({ panic_on(!((x) cond), \"int check fail: \" #x \" \" #cond); })\n#define CHECK_HEAP(ptr) \\\n  ({ panic_on(!IN_RANGE((ptr), heap)); })\n</code></pre> <p>\u53d8\u91cf\u6709 \u201ctyped annotation\u201d</p> <ul> <li>CHECK_INT(waitlist-&gt;count, &gt;= 0);</li> <li>CHECK_INT(pid, &lt; MAX_PROCS);</li> <li>CHECK_HEAP(ctx-&gt;rip); CHECK_HEAP(ctx-&gt;cr3);</li> <li>\u53d8\u91cf\u542b\u4e49\u6539\u53d8 \u2192 \u53d1\u751f\u5947\u602a\u95ee\u9898 (overflow, memory error, ...)</li> </ul>"},{"location":"Category/SystemOperation/NJU/13.%20%E5%B9%B6%E5%8F%91%20Bug%20%E7%9A%84%E5%BA%94%E5%AF%B9/#6xv6","title":"6.xv6 \u81ea\u65cb\u9501\u5b9e\u73b0","text":"\u793a\u4f8b\uff1aspinlock-xv6spinlock-xv6.cthread.hthread-sync.h <p>\u4ee3\u7801\u793a\u4f8b\uff1axv6 \u81ea\u65cb\u9501\u5b9e\u73b0</p> <p>xv6 \u81ea\u65cb\u9501\u662f\u9632\u5fa1\u6027\u7f16\u7a0b\u7684\u5178\u8303\u3002\u4ed6\u5047\u8bbe\u9501\u7684\u4f7f\u7528\u8005\u4f1a\u72af\u5404\u79cd\u7c7b\u578b\u7684\u9519\u8bef\uff0c\u5305\u62ec AA \u578b\u6b7b\u9501\u3001double release\u3001\u91ca\u653e\u975e\u672c\u5904\u7406\u5668\u6301\u6709\u7684\u9501\u7b49\u3002</p> <pre><code>#include \"thread.h\"\n#include \"thread-sync.h\"\n\nstruct cpu {\n  int ncli;\n};\n\nstruct spinlock {\n  const char *name;\n  int locked;\n  struct cpu *cpu;\n};\n\n__thread struct cpu lcpu;\n\nstruct cpu *mycpu() {\n  return &amp;lcpu;\n}\n\n#define panic(...) \\\n  do { \\\n    fprintf(stderr, \"Panic %s:%d \", __FILE__, __LINE__); \\\n    fprintf(stderr, __VA_ARGS__); \\\n    fprintf(stderr, \"\\n\"); \\\n    abort(); \\\n  } while (0) \\\n\nvoid\ninitlock(struct spinlock *lk, char *name)\n{\n  lk-&gt;name = name;\n  lk-&gt;locked = 0;\n  lk-&gt;cpu = 0;\n}\n\n// Pushcli/popcli are like cli/sti except that they are matched:\n// it takes two popcli to undo two pushcli.  Also, if interrupts\n// are off, then pushcli, popcli leaves them off.\n\nvoid\npushcli(void)\n{\n  // removes CPU-dependent code\n  // eflags = readeflags();\n  // cli();\n  // if(mycpu()-&gt;ncli == 0)\n  //   mycpu()-&gt;intena = eflags &amp; FL_IF;\n  mycpu()-&gt;ncli += 1;\n}\n\nvoid\npopcli(void)\n{\n  // removes CPU-dependent code\n  //if(readeflags()&amp;FL_IF)\n  //  panic(\"popcli - interruptible\");\n  if(--mycpu()-&gt;ncli &lt; 0)\n    panic(\"popcli\");\n  //if(mycpu()-&gt;ncli == 0 &amp;&amp; mycpu()-&gt;intena)\n  //  sti();\n}\n\n// Check whether this cpu is holding the lock.\nint\nholding(struct spinlock *lock)\n{\n  int r;\n  pushcli();\n  r = lock-&gt;locked &amp;&amp; lock-&gt;cpu == mycpu();\n  popcli();\n  return r;\n}\n\n// Acquire the lock.\n// Loops (spins) until the lock is acquired.\n// Holding a lock for a long time may cause\n// other CPUs to waste time spinning to acquire it.\nvoid\nacquire(struct spinlock *lk)\n{\n  pushcli(); // disable interrupts to avoid deadlock.\n  if(holding(lk))\n    panic(\"acquire\");\n\n  // The xchg is atomic.\n  while(atomic_xchg(&amp;lk-&gt;locked, 1) != 0)\n    ;\n\n  // Tell the C compiler and the processor to not move loads or stores\n  // past this point, to ensure that the critical section's memory\n  // references happen after the lock is acquired.\n  __sync_synchronize();\n\n  // Record info about lock acquisition for debugging.\n  lk-&gt;cpu = mycpu();\n}\n\n// Release the lock.\nvoid\nrelease(struct spinlock *lk)\n{\n  if(!holding(lk))\n    panic(\"release\");\n\n  lk-&gt;cpu = 0;\n\n  // Tell the C compiler and the processor to not move loads or stores\n  // past this point, to ensure that all the stores in the critical\n  // section are visible to other cores before the lock is released.\n  // Both the C compiler and the hardware may re-order loads and\n  // stores; __sync_synchronize() tells them both not to.\n  __sync_synchronize();\n\n  // Release the lock, equivalent to lk-&gt;locked = 0.\n  // This code can't use a C assignment, since it might\n  // not be atomic. A real OS would use C atomics here.\n  asm volatile(\"movl $0, %0\" : \"+m\" (lk-&gt;locked) : );\n\n  popcli();\n}\n\nstruct spinlock lk;\n\n#define N 10000000\n\nlong sum = 0;\n\nvoid Tworker(int tid) {\n  lcpu = (struct cpu) { .ncli = 0 };\n  for (int i = 0; i &lt; N; i++) {\n    acquire(&amp;lk);\n    sum++;\n    release(&amp;lk);\n  }\n}\n\nint main() {\n  initlock(&amp;lk, \"spinlock\");\n  for (int i = 0; i &lt; 2; i++) {\n    create(Tworker);\n  }\n  join();\n  printf(\"sum = %ld\\n\", sum);\n}\n</code></pre> <pre><code>#include &lt;stdlib.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n#include &lt;stdatomic.h&gt;\n#include &lt;assert.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;pthread.h&gt;\n\n#define NTHREAD 64\nenum { T_FREE = 0, T_LIVE, T_DEAD, };\nstruct thread {\n  int id, status;\n  pthread_t thread;\n  void (*entry)(int);\n};\n\nstruct thread tpool[NTHREAD], *tptr = tpool;\n\nvoid *wrapper(void *arg) {\n  struct thread *thread = (struct thread *)arg;\n  thread-&gt;entry(thread-&gt;id);\n  return NULL;\n}\n\nvoid create(void *fn) {\n  assert(tptr - tpool &lt; NTHREAD);\n  *tptr = (struct thread) {\n    .id = tptr - tpool + 1,\n    .status = T_LIVE,\n    .entry = fn,\n  };\n  pthread_create(&amp;(tptr-&gt;thread), NULL, wrapper, tptr);\n  ++tptr;\n}\n\nvoid join() {\n  for (int i = 0; i &lt; NTHREAD; i++) {\n    struct thread *t = &amp;tpool[i];\n    if (t-&gt;status == T_LIVE) {\n      pthread_join(t-&gt;thread, NULL);\n      t-&gt;status = T_DEAD;\n    }\n  }\n}\n\n__attribute__((destructor)) void cleanup() {\n  join();\n}\n</code></pre> <pre><code>#include &lt;semaphore.h&gt;\n#include &lt;pthread.h&gt;\n\n// Spinlock\ntypedef int spinlock_t;\n#define SPIN_INIT() 0\n\nstatic inline int atomic_xchg(volatile int *addr, int newval) {\n  int result;\n  asm volatile (\"lock xchg %0, %1\":\n    \"+m\"(*addr), \"=a\"(result) : \"1\"(newval) : \"memory\");\n  return result;\n}\n\nvoid spin_lock(spinlock_t *lk) {\n  while (1) {\n    int value = atomic_xchg(lk, 1);\n    if (value == 0) {\n      break;\n    }\n  }\n}\nvoid spin_unlock(spinlock_t *lk) {\n  atomic_xchg(lk, 0);\n}\n\n// Mutex\ntypedef pthread_mutex_t mutex_t;\n#define MUTEX_INIT() PTHREAD_MUTEX_INITIALIZER\nvoid mutex_lock(mutex_t *lk)   { pthread_mutex_lock(lk); }\nvoid mutex_unlock(mutex_t *lk) { pthread_mutex_unlock(lk); }\n\n// Conditional Variable\ntypedef pthread_cond_t cond_t;\n#define COND_INIT() PTHREAD_COND_INITIALIZER\n#define cond_wait pthread_cond_wait\n#define cond_broadcast pthread_cond_broadcast\n#define cond_signal pthread_cond_signal\n\n// Semaphore\n#define P sem_wait\n#define V sem_post\n#define SEM_INIT(sem, val) sem_init(sem, 0, val)\n</code></pre> <p>\u9632\u5fa1\u6027\u7f16\u7a0b\u5bf9\u5927\u578b\u7cfb\u7edf\u6765\u8bf4\u662f\u81f3\u5173\u91cd\u8981\u7684\u3002\u5982\u679c\u6ca1\u6709\u9002\u5f53\u7684 assertions\uff0c\u8c03\u8bd5\u4ee3\u7801\u4f1a\u53d8\u5f97\u975e\u5e38\u8270\u96be\u3002</p>"},{"location":"Category/SystemOperation/NJU/13.%20%E5%B9%B6%E5%8F%91%20Bug%20%E7%9A%84%E5%BA%94%E5%AF%B9/#_2","title":"\u8fd0\u884c\u65f6\u68c0\u67e5","text":""},{"location":"Category/SystemOperation/NJU/4.Python%E5%BB%BA%E6%A8%A1%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/","title":"4.Python\u5efa\u6a21\u64cd\u4f5c\u7cfb\u7edf","text":""},{"location":"Category/SystemOperation/NJU/4.Python%E5%BB%BA%E6%A8%A1%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#1","title":"1.\u72b6\u6001\u673a","text":"<p>\u65e0\u8bba\u662f\u8f6f\u4ef6\u8fd8\u662f\u786c\u4ef6\uff0c\u90fd\u662f\u72b6\u6001\u673a\uff0c\u7406\u8bba\u4e0a\u8bf4\uff0c\u53ea\u9700\u8981\u4e24\u4e2a API:</p> <ul> <li>dump_state() - \u83b7\u53d6\u5f53\u524d\u7a0b\u5e8f\u72b6\u6001</li> <li>single_step() - \u6267\u884c\u4e00\u6b65</li> </ul> <p>\u7531\u6b64\u53ef\u4ee5\u7b80\u5316\u64cd\u4f5c\u7cfb\u7edf: \u628a\u590d\u6742\u7684\u4e1c\u897f\u5206\u89e3\u6210\u7b80\u5355\u7684\u4e1c\u897f\uff0c\u6211\u4eec\u771f\u6b63\u5173\u5fc3\u7684\u6982\u5ff5\uff1a</p> <ul> <li>\u5e94\u7528\u7a0b\u5e8f (\u9ad8\u7ea7\u8bed\u8a00\u72b6\u6001\u673a)</li> <li>\u7cfb\u7edf\u8c03\u7528 (\u64cd\u4f5c\u7cfb\u7edf API)</li> <li>\u64cd\u4f5c\u7cfb\u7edf\u5185\u90e8\u5b9e\u73b0</li> </ul> <p>\u6ca1\u6709\u4eba\u89c4\u5b9a\u4e0a\u9762\u4e09\u8005\u5982\u4f55\u5b9e\u73b0\uff0c\u901a\u5e38\u7684\u601d\u8def\uff1a\u771f\u5b9e\u7684\u64cd\u4f5c\u7cfb\u7edf + QEMU/NEMU \u6a21\u62df\u5668</p> <p>\u6211\u4eec\u7684\u601d\u8def:</p> <ul> <li>\u5e94\u7528\u7a0b\u5e8f = \u7eaf\u7cb9\u8ba1\u7b97\u7684 Python \u4ee3\u7801 + \u7cfb\u7edf\u8c03\u7528</li> <li>\u64cd\u4f5c\u7cfb\u7edf = Python \u7cfb\u7edf\u8c03\u7528\u5b9e\u73b0\uff0c\u6709 \u201c\u5047\u60f3\u201d \u7684 I/O \u8bbe\u5907</li> </ul> <p>\u5982\u4e0b\uff1a</p> <pre><code>def main():\n    sys_write('Hello, OS World')\n</code></pre>"},{"location":"Category/SystemOperation/NJU/4.Python%E5%BB%BA%E6%A8%A1%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#2","title":"2.\u73a9\u5177\u7684\u610f\u4e49","text":"<p>\u5e76\u6ca1\u6709\u8131\u79bb\u771f\u5b9e\u7684\u64cd\u4f5c\u7cfb\u7edf</p> <ul> <li>\u201c\u7b80\u5316\u201d \u4e86\u64cd\u4f5c\u7cfb\u7edf\u7684 API<ul> <li>\u5728\u6682\u65f6\u4e0d\u8981\u8fc7\u5ea6\u5173\u6ce8\u7ec6\u8282\u7684\u65f6\u5019\u7406\u89e3\u64cd\u4f5c\u7cfb\u7edf</li> </ul> </li> <li>\u7ec6\u8282\u4e5f\u4f1a\u6709\u7684\uff0c\u4f46\u4e0d\u662f\u73b0\u5728<ul> <li>\u5b66\u4e60\u8def\u7ebf\uff1a\u5148 100% \u7406\u89e3\u73a9\u5177\uff0c\u518d\u7406\u89e3\u771f\u5b9e\u7cfb\u7edf\u548c\u73a9\u5177\u7684\u5dee\u5f02</li> </ul> </li> </ul>"},{"location":"Category/SystemOperation/NJU/4.Python%E5%BB%BA%E6%A8%A1%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#3","title":"3.\u64cd\u4f5c\u7cfb\u7edf\u6a21\u578b\uff1a\u7b80\u5316\u5b9e\u73b0","text":"\u8bf4\u660ePython \u6d4b\u8bd5\u4ee3\u7801PythonC \u6d4b\u8bd5C \u8bed\u8a00\u5b9e\u73b0 <p>\u5728\u6211\u4eec\u7684\u64cd\u4f5c\u7cfb\u7edf\u6a21\u578b\u4e2d\uff0c\u5e94\u7528\u7a0b\u5e8f (\u72b6\u6001\u673a) \u88ab\u5206\u4e3a\u4e24\u90e8\u5206\uff1a \u786e\u5b9a\u6027 (deterministic) \u7684\u672c\u5730\u8ba1\u7b97\uff0c\u548c\u53ef\u80fd\u4ea7\u751f\u975e\u786e\u5b9a\u6027 \u7684\u7cfb\u7edf\u8c03\u7528 (\u4ee5 sys \u5f00\u5934\u7684\u51fd\u6570)\u3002\u64cd\u4f5c\u7cfb\u7edf\u63d0\u4f9b\u4ee5\u4e0b API\uff1a</p> \u7cfb\u7edf\u8c03\u7528/Linux \u5bf9\u5e94 \u884c\u4e3a sys_spawn(fn)/pthread_create \u521b\u5efa\u5171\u4eab\u5185\u5b58\u7684\u7ebf\u7a0b\uff0c\u5e76\u4e14\u4ece fn \u5f00\u59cb\u6267\u884c sys_fork()/fork \u521b\u5efa\u5f53\u524d\u72b6\u6001\u673a\u7684\u5b8c\u6574\u590d\u5236 sys_sched()/\u5b9a\u65f6\u88ab\u52a8\u8c03\u7528 \u5207\u6362\u5230\u968f\u673a\u7684\u7ebf\u7a0b/\u8fdb\u7a0b\u6267\u884c sys_choose(xs)/rand \u8fd4\u56de\u4e00\u4e2a xs \u4e2d\u7684\u968f\u673a\u7684\u9009\u62e9 sys_write(s)/printf \u5411\u8c03\u8bd5\u7ec8\u7aef\u8f93\u51fa\u5b57\u7b26\u4e32 s sys_bread(k)/read \u8bfb\u53d6\u865a\u62df\u8bbe\u78c1\u76d8\u5757 k \u7684\u6570\u636e sys_bwrite(k, v)/write \u5411\u865a\u62df\u78c1\u76d8\u5757 k \u5199\u5165\u6570\u636e v sys_sync()/sync \u5c06\u6240\u6709\u5411\u865a\u62df\u78c1\u76d8\u7684\u6570\u636e\u5199\u5165\u843d\u76d8 sys_crash()/\u957f\u6309\u7535\u6e90\u6309\u952e \u6a21\u62df\u7cfb\u7edf\u5d29\u6e83 <pre><code>count = 0\ndef Tprint(name):\n    global count\n    for i in range(3):\n        count += 1\n        sys_write(f'#{count:02} Hello from {name}{i+1}\\n')\n        sys_sched()\n\ndef main():\n    n = sys_choose([3, 4, 5])\n    sys_write(f'#Thread = {n}\\n')\n    for name in 'ABCDE'[:n]:\n        sys_spawn(Tprint, name)\n    sys_sched()\n</code></pre> <pre><code>#!/usr/bin/env python3\n\nimport sys\nimport random\nfrom pathlib import Path\n\nclass OperatingSystem():\n    \"\"\"A minimal executable operating system model.\"\"\"\n\n    SYSCALLS = ['choose', 'write', 'spawn', 'sched']\n\n    class Thread:\n        \"\"\"A \"freezed\" thread state.\"\"\"\n\n        def __init__(self, func, *args):\n            self._func = func(*args)\n            self.retval = None\n\n        def step(self):\n            \"\"\"Proceed with the thread until its next trap.\"\"\"\n            syscall, args, *_ = self._func.send(self.retval)\n            self.retval = None\n            return syscall, args\n\n    def __init__(self, src):\n        variables = {}\n        exec(src, variables)\n        self._main = variables['main']\n\n    def run(self):\n        threads = [OperatingSystem.Thread(self._main)]\n        while threads:  # Any thread lives\n            try:\n                match (t := threads[0]).step():\n                    case 'choose', xs:  # Return a random choice\n                        t.retval = random.choice(xs)\n                    case 'write', xs:  # Write to debug console\n                        print(xs, end='')\n                    case 'spawn', (fn, args):  # Spawn a new thread\n                        threads += [OperatingSystem.Thread(fn, *args)]\n                    case 'sched', _:  # Non-deterministic schedule\n                        random.shuffle(threads)\n            except StopIteration:  # A thread terminates\n                threads.remove(t)\n                random.shuffle(threads)  # sys_sched()\n\nif __name__ == '__main__':\n    if len(sys.argv) &lt; 2:\n        print(f'Usage: {sys.argv[0]} file')\n        exit(1)\n\n    src = Path(sys.argv[1]).read_text()\n    for syscall in OperatingSystem.SYSCALLS:\n        src = src.replace(f'sys_{syscall}',        # sys_write(...)\n                          f'yield \"{syscall}\", ')  #  -&gt; yield 'write', (...)\n\n    OperatingSystem(src).run()\n</code></pre> <pre><code>#include \"os-real.h\"\n\nint count = 0;\n\nvoid *Tprint(void *s) {\n  char buf[64];\n  for (int i = 0; i &lt; 3; i++) {\n    sprintf(buf, \"#%02d Hello from %c%d\\n\", ++count, *(const char *)s, i);\n    sys_write(buf);\n    sys_sched();\n  }\n  return NULL;\n}\n\nint main() {\n  int n = sys_choose(3) + 3;\n  char buf[64];\n  sprintf(buf, \"#Thread = %d\\n\", n);\n  sys_write(buf);\n  for (int i = 0; i &lt; n; i++) {\n    sys_spawn(Tprint, &amp;\"ABCDE\"[i]);\n  }\n}\n</code></pre> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;pthread.h&gt;\n\nstatic pthread_t threads[64];\nstatic int nthreads = 0;\n\nstatic inline void\nsys_write(const char *s) {\n  printf(\"%s\", s);\n  fflush(stdout);\n}\n\nstatic inline void\nsys_sched() {\n  usleep(rand() % 10000);\n}\n\nstatic inline void\nsys_spawn(void *(*fn)(void *), void *args) {\n    pthread_create(&amp;threads[nthreads++], NULL, fn, args);\n}\n\nstatic inline int\nsys_choose(int x) {\n  return rand() % x;\n}\n\n// Constructor called before main()\nstatic inline void __attribute__((constructor))\nsrand_init() {\n  srand(time(0));\n}\n\n// Destructor called after main()\nstatic inline void __attribute__((destructor))\nthread_join() {\n  for (int i = 0; i &lt; nthreads; i++) {\n    pthread_join(threads[i], NULL);  // Wait for thread terminations\n  }\n}\n</code></pre> <ol> <li> <p>\u64cd\u4f5c\u7cfb\u7edf\uff1a\u8bbe\u8ba1\u4e0e\u5b9e\u73b0 (2023 \u6625\u5b63\u5b66\u671f) \u21a9</p> </li> <li> <p>4. Python \u5efa\u6a21\u64cd\u4f5c\u7cfb\u7edf \u21a9</p> </li> <li> <p>Python \u5b9e\u73b0\u64cd\u4f5c\u7cfb\u7edf\u6a21\u578b [\u5357\u4eac\u5927\u5b662023\u64cd\u4f5c\u7cfb\u7edf-P4] (\u848b\u708e\u5ca9) \u21a9</p> </li> </ol>"},{"location":"Category/SystemOperation/NJU/5.%20%E5%A4%9A%E5%A4%84%E7%90%86%E5%99%A8%E7%BC%96%E7%A8%8B%EF%BC%9A%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/","title":"5. \u591a\u5904\u7406\u5668\u7f16\u7a0b\uff1a\u4ece\u5165\u95e8\u5230\u653e\u5f03","text":""},{"location":"Category/SystemOperation/NJU/5.%20%E5%A4%9A%E5%A4%84%E7%90%86%E5%99%A8%E7%BC%96%E7%A8%8B%EF%BC%9A%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/#1","title":"1. \u591a\u5904\u7406\u5668\u7f16\u7a0b\u5165\u95e8","text":"<p>\u7ebf\u7a0b\uff1a\u5171\u4eab\u5185\u5b58\u7684\u6267\u884c\u6d41\uff0c\u6267\u884c\u6d41\u62e5\u6709\u72ec\u7acb\u7684\u5806\u6808/\u5bc4\u5b58\u5668\u3002</p> <pre><code>#include \"thread.h\"\n\nvoid Ta() { while (1) { printf(\"a\"); } }\nvoid Tb() { while (1) { printf(\"b\"); } }\n\nint main() {\n  create(Ta);\n  create(Tb);\n}\n</code></pre>"},{"location":"Category/SystemOperation/NJU/5.%20%E5%A4%9A%E5%A4%84%E7%90%86%E5%99%A8%E7%BC%96%E7%A8%8B%EF%BC%9A%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/#11","title":"1.1 \u786e\u5b9a\u7ebf\u7a0b\u5806\u6808\u5927\u5c0f","text":"\u793a\u4f8b\uff1astack-probestack-probethread.h <p>\u4ee3\u7801\u793a\u4f8b\uff1a\u786e\u5b9a\u7ebf\u7a0b\u5806\u6808\u5927\u5c0f</p> <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 \u201c\u65e0\u7a77\u9012\u5f52\u201d\uff0c\u5e76\u5728\u9012\u5f52\u65f6\u901a\u8fc7\u5c40\u90e8\u53d8\u91cf\u7684\u5730\u5740\u6765\u4f30\u7b97\u5206\u914d\u7ed9\u7ebf\u7a0b\u7684\u6808\u7a7a\u95f4\u3002</p> <pre><code>Stack(T1) &gt;= 8169 KB\nStack(T1) &gt;= 8171 KB\nStack(T1) &gt;= 8172 KB\nStack(T1) &gt;= 8174 KB\nStack(T1) &gt;= 8175 KB\nStack(T1) &gt;= 8177 KB\n[1]    2133 segmentation fault (core dumped)  ./stack.out\n</code></pre> <p>\u7528\u4e0b\u9762\u7684 shell \u547d\u4ee4\u4e5f\u53ef\u4ee5\u67e5\u770b\uff1a</p> <pre><code>ulimit -s\n# 8192\n</code></pre> <pre><code>#include \"thread.h\"\n\nvoid * volatile low[64];\nvoid * volatile high[64];\n\nvoid update_range(int T, void *ptr) {\n    if (ptr &lt; low[T]) low[T] = ptr;\n    if (ptr &gt; high[T]) high[T] = ptr;\n}\n\nvoid probe(int T, int n) {\n    update_range(T, &amp;n);\n    long sz = (uintptr_t)high[T] - (uintptr_t)low[T];\n    if (sz % 1024 &lt; 32) {\n        printf(\"Stack(T%d) &gt;= %ld KB\\n\", T, sz / 1024);\n    }\n    probe(T, n + 1);  // Infinite recursion\n}\n\nvoid Tprobe(int T) {\n    low[T] = (void *)-1;\n    high[T] = (void *)0;\n    update_range(T, &amp;T);\n    probe(T, 0);\n}\n\nint main() {\n    setbuf(stdout, NULL);\n    for (int i = 0; i &lt; 4; i++) {\n        create(Tprobe);\n    }\n}\n</code></pre> <pre><code>#include &lt;stdlib.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n#include &lt;stdatomic.h&gt;\n#include &lt;assert.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;pthread.h&gt;\n\n#define NTHREAD 64\nenum { T_FREE = 0, T_LIVE, T_DEAD, };\nstruct thread {\n    int id, status;\n    pthread_t thread;\n    void (*entry)(int);\n};\n\nstruct thread tpool[NTHREAD], *tptr = tpool;\n\nvoid *wrapper(void *arg) {\n    struct thread *thread = (struct thread *)arg;\n    thread-&gt;entry(thread-&gt;id);\n    return NULL;\n}\n\nvoid create(void *fn) {\n    assert(tptr - tpool &lt; NTHREAD);\n    *tptr = (struct thread) {\n        .id = tptr - tpool + 1,\n        .status = T_LIVE,\n        .entry = fn,\n    };\n    pthread_create(&amp;(tptr-&gt;thread), NULL, wrapper, tptr);\n    ++tptr;\n}\n\nvoid join() {\n    for (int i = 0; i &lt; NTHREAD; i++) {\n        struct thread *t = &amp;tpool[i];\n        if (t-&gt;status == T_LIVE) {\n        pthread_join(t-&gt;thread, NULL);\n        t-&gt;status = T_DEAD;\n        }\n    }\n}\n\n__attribute__((destructor)) void cleanup() {\n    join();\n}\n</code></pre>"},{"location":"Category/SystemOperation/NJU/5.%20%E5%A4%9A%E5%A4%84%E7%90%86%E5%99%A8%E7%BC%96%E7%A8%8B%EF%BC%9A%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/#12","title":"1.2 \u66f4\u6539\u7ebf\u7a0b\u6808\u7684\u5927\u5c0f","text":"<p>\u901a\u8fc7 <code>pthread</code> \u521b\u5efa\u7ebf\u7a0b\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u8bbe\u5b9a\u6808\u7684\u5927\u5c0f\uff0c\u5c06 <code>thread.h</code> \u4e2d\u51fd\u6570 <code>create</code> \u66f4\u6539\u5982\u4e0b\uff1a</p> <pre><code>void create(void *fn) {\n  assert(tptr - tpool &lt; NTHREAD);\n  *tptr = (struct thread) {\n    .id = tptr - tpool + 1,\n    .status = T_LIVE,\n    .entry = fn,\n  };\n\n  pthread_t thread_id;\n  /* thread \u5806\u6808\u8bbe\u7f6e\u4e3a10MB\uff0cstacksize\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\u3002*/\n  int ret ,stacksize = 10 * 1024 * 1024; \n  pthread_attr_t attr;\n  ret = pthread_attr_init(&amp;attr); /*\u521d\u59cb\u5316\u7ebf\u7a0b\u5c5e\u6027*/\n  assert(ret == 0);\n  ret = pthread_attr_setstacksize(&amp;attr, stacksize);\n  assert(ret == 0);\n\n  pthread_create(&amp;(tptr-&gt;thread), &amp;attr, wrapper, tptr);\n  ++tptr;\n}\n</code></pre> <p>\u8fd9\u91cc\u5c06\u5f53\u524d\u7ebf\u7a0b\u7684\u5927\u5c0f\u66f4\u6539\u4e3a <code>10MB</code>:</p> <pre><code>Stack(T3) &gt;= 10218 KB\nStack(T3) &gt;= 10220 KB\nStack(T3) &gt;= 10221 KB\nStack(T3) &gt;= 10223 KB\nStack(T3) &gt;= 10224 KB\n[1]    4033 segmentation fault (core dumped)  ./stack.out\n</code></pre>"},{"location":"Category/SystemOperation/NJU/5.%20%E5%A4%9A%E5%A4%84%E7%90%86%E5%99%A8%E7%BC%96%E7%A8%8B%EF%BC%9A%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/#2-1","title":"2. \u653e\u5f03 (1)\uff1a\u539f\u5b50\u6027","text":"<p>\u5171\u4eab\u5185\u5b58 \u544a\u8bc9\u6211\u4eec\u5bf9\u4e8e\u5168\u5c40\u7684\u53d8\u91cf x\uff0c\u5176\u5b83\u7ebf\u7a0b\u53ef\u4ee5\u968f\u65f6\u66f4\u6539 x \u7684\u503c\uff0c\u5bfc\u81f4\u4e24\u6b21\u53ef\u80fd\u8bfb\u5230\u4e0d\u540c\u7684 x\uff1a</p> <pre><code>int x = 0;\nint Tworker() {\n  printf(\"%d\\n\", x);  // Global x\n  printf(\"%d\\n\", x);\n}\n</code></pre> <p>\u5982\u4e0b\u9762\u6c42\u548c\u7684\u4f8b\u5b50\uff1a</p> \u6c42\u548c\u7ed3\u679csum.c <p>\u6bcf\u6b21\u8ba1\u7b97\u7ed3\u679c\u4e0d\u5c3d\u76f8\u540c\uff1a</p> <pre><code>\u279c ./sum.out \nsum = 105627439\n\u279c ./sum.out\nsum = 104261448\n\u279c ./sum.out\nsum = 106720644\n\u279c ./sum.out\nsum = 106128921\n</code></pre> <pre><code>#define N 100000000\nlong sum = 0;\n\nvoid Tsum() { \n    for (int i = 0; i &lt; N; i++) \n        sum++; \n}\n\nint main() {\n    create(Tsum);\n    create(Tsum);\n    join();\n    printf(\"sum = %ld\\n\", sum);\n}\n</code></pre> <p>\u901a\u8fc7\u67e5\u770b\u53cd\u6c47\u7f16\u53ef\u4ee5\u770b\u5230\uff1a</p> <pre><code>0000000000001348 &lt;Tsum&gt;:\n    1348:       f3 0f 1e fa             endbr64 \n    134c:       55                      push   %rbp\n    134d:       48 89 e5                mov    %rsp,%rbp\n    1350:       c7 45 fc 00 00 00 00    movl   $0x0,-0x4(%rbp)\n    1357:       eb 16                   jmp    136f &lt;Tsum+0x27&gt;\n    1359:       48 8b 05 e0 32 00 00    mov    0x32e0(%rip),%rax        # 4640 &lt;sum&gt;\n    1360:       48 83 c0 01             add    $0x1,%rax\n    1364:       48 89 05 d5 32 00 00    mov    %rax,0x32d5(%rip)        # 4640 &lt;sum&gt;\n    136b:       83 45 fc 01             addl   $0x1,-0x4(%rbp)\n    136f:       81 7d fc ff e0 f5 05    cmpl   $0x5f5e0ff,-0x4(%rbp)\n    1376:       7e e1                   jle    1359 &lt;Tsum+0x11&gt;\n    1378:       90                      nop\n    1379:       90                      nop\n    137a:       5d                      pop    %rbp\n    137b:       c3                      ret \n</code></pre> <p>Tsum \u51fd\u6570\u5305\u542b\u4e86\u591a\u6761\u6307\u4ee4\u5b9e\u73b0 sum++\uff0c\u539f\u5b50\u6027\u81ea\u7136\u5c31\u4fdd\u8bc1\u4e0d\u4e86\u3002</p> <p>\u5982\u679c\u7528 -O2 \u6765\u7f16\u8bd1\uff0c\u5f88\u5947\u602a\uff0c\u5b83\u795e\u5947\u7684\u5c31\u5bf9\u4e86\uff0c\u6c47\u7f16\u5982\u4e0b\uff1a</p> <pre><code>0000000000001230 &lt;Tsum&gt;:\n    1230:       f3 0f 1e fa             endbr64 \n    1234:       48 81 05 01 2e 00 00    addq   $0x5f5e100,0x2e01(%rip)        # 4040 &lt;sum&gt;\n    123b:       00 e1 f5 05 \n    123f:       c3                      ret \n</code></pre> <p>$0x5f5e100 \u6b63\u597d\u662f N\uff0c\u7f16\u8bd1\u5668\u8df3\u8fc7 for \u5faa\u73af\u76f4\u63a5\u8ba1\u7b97\u51fa\u4e86\u7ed3\u679c \ud83d\ude02 <sub>~</sub></p> <p>\u6ce8\u610f</p> <p>addq \u5e76\u975e\u662f\u539f\u5b50\u6307\u4ee4\uff0c\u8fd9\u91cc\u6267\u884c\u7ed3\u679c\u6b63\u786e\u4e5f\u53ea\u662f\u6982\u7387\u5927\u4e86\u800c\u5df2</p> <p>\u5982\u679c\u7528 -O1 \u6765\u7f16\u8bd1\uff0c\u5b83\u53c8\u795e\u5947\u7684\u9519\u4e86\uff0c\u6c47\u7f16\u5982\u4e0b\uff1a</p> <pre><code>00000000000011c3 &lt;Tsum&gt;:\n    11c3:       f3 0f 1e fa             endbr64 \n    // \u8bfb\u53d6\u5168\u5c40 sum \u503c\n    11c7:       48 8b 15 72 2e 00 00    mov    0x2e72(%rip),%rdx        # 4040 &lt;sum&gt;\n    11ce:       48 8d 42 01             lea    0x1(%rdx),%rax\n    11d2:       48 81 c2 01 e1 f5 05    add    $0x5f5e101,%rdx\n    11d9:       48 89 c1                mov    %rax,%rcx\n    11dc:       48 83 c0 01             add    $0x1,%rax\n    11e0:       48 39 d0                cmp    %rdx,%rax\n    11e3:       75 f4                   jne    11d9 &lt;Tsum+0x16&gt;\n    // \u5c06\u7ed3\u679c\u5199\u56de sum\n    11e5:       48 89 0d 54 2e 00 00    mov    %rcx,0x2e54(%rip)        # 4040 &lt;sum&gt;\n    11ec:       c3                      ret \n</code></pre> <p>\u663e\u7136\u4e24\u4e2a\u7ebf\u7a0b\u7b2c\u4e00\u6b21\u8bfb\u53d6 sum \u7684\u503c\u90fd\u662f\u96f6\uff0c\u4e2d\u95f4\u8ba1\u7b97\u5b8c\u6210\u518d\u5199\u56de sum\uff0c\u6700\u7ec8\u7ed3\u679c sum = 100000000;</p>"},{"location":"Category/SystemOperation/NJU/5.%20%E5%A4%9A%E5%A4%84%E7%90%86%E5%99%A8%E7%BC%96%E7%A8%8B%EF%BC%9A%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/#3-2","title":"3. \u653e\u5f03 (2)\uff1a\u6267\u884c\u987a\u5e8f","text":"<p>\u4e0a\u9762\u7684\u4f8b\u5b50\u8bf4\u660e\u4e86\u7f16\u8bd1\u6210\u6709\u53ef\u80fd\u5bfc\u81f4\u6267\u884c\u7684\u7ed3\u679c\u4e0d\u4e00\u6837\uff1b\u4e0b\u9762\u7684\u4f8b\u5b50\u4e5f\u8bf4\u660e\u7684\u8fd9\u70b9\uff1a</p> <p><pre><code>int done = 0;\nvoid sum() {\n    while (!done);\n}\n</code></pre> \u5982\u679c\u7528 -O2 \u6765\u7f16\u8bd1\uff0c\u6c47\u7f16\u5982\u4e0b\uff0c\u76f4\u63a5\u8fd4\u56de\u4e86\uff1a</p> <pre><code>sum():\n        ret\ndone:\n        .zero   4\n</code></pre> <p>\u4f46\u662f\u5982\u679c int volatile done = 0; \u6c47\u7f16\u5982\u4e0b\uff1a</p> <pre><code>sum():\n.L2:\n        mov     eax, DWORD PTR done[rip]\n        test    eax, eax\n        je      .L2\n        ret\ndone:\n        .zero   4\n</code></pre>"},{"location":"Category/SystemOperation/NJU/5.%20%E5%A4%9A%E5%A4%84%E7%90%86%E5%99%A8%E7%BC%96%E7%A8%8B%EF%BC%9A%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/#31","title":"3.1 \u4fdd\u8bc1\u6267\u884c\u987a\u5e8f","text":"<ul> <li>\u63d2\u5165 \u201c\u4e0d\u53ef\u4f18\u5316\u201d \u4ee3\u7801\u5982\uff1a     <pre><code>asm volatile (\"\" ::: \"memory\");\n</code></pre></li> <li>\u6807\u8bb0\u53d8\u91cf load/store \u4e3a\u4e0d\u53ef\u4f18\u5316\uff0c\u4f7f\u7528 volatile \u53d8\u91cf\u5982\uff1a     <pre><code>  extern int volatile done;\n\n  while (!done) ;\n</code></pre> \u5982\u679c\u6709\u8fd9\u6837\u7684\u4ee3\u7801\uff1a</li> </ul> <p><pre><code>int x = 0;\nvoid Tsum() {\n    int t = x;\n    t = x;\n}\n</code></pre> \u90a3\u4e48\u7f16\u8bd1\u5668\u5b8c\u5168\u6709\u53ef\u80fd\u4f1a\u5c06\u7b2c\u4e8c\u884c t = x \u79fb\u9664\u6389\uff0c\u5982\u679c\u63d2\u5165\u4e0d\u53ef\u4f18\u5316\uff1a</p> <p><pre><code>int x = 0;\nvoid Tsum() {\n    int t = x;\n    asm volatile (\"\" ::: \"memory\");\n    t = x;\n}\n</code></pre> \u73b0\u5728\u7f16\u8bd1\u5668\u5c31\u4e0d\u4f1a\u5c06\u7b2c\u4e8c\u884c t = x \u79fb\u9664\u6389\u4e86\u3002</p>"},{"location":"Category/SystemOperation/NJU/5.%20%E5%A4%9A%E5%A4%84%E7%90%86%E5%99%A8%E7%BC%96%E7%A8%8B%EF%BC%9A%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/#4-3","title":"4. \u653e\u5f03 (3)\uff1a\u5904\u7406\u5668\u95f4\u7684\u53ef\u89c1\u6027","text":"<pre><code>int x = 0, y = 0;\n\nvoid T1() {\n  x = 1;     // \u2460 Store(x);\n  int t = y; // \u2461 Load(y)\n  printf(\"%d\", t);\n}\n\nvoid T2() {\n  y = 1;     // \u2462 Store(y);\n  int t = x; // \u2463 Load(x)\n  printf(\"%d\", t);\n}\n</code></pre> <p>\u904d\u5386\u6a21\u578b\u544a\u8bc9\u6211\u4eec\uff1a01, 10, 11</p> \u793a\u4f8bstore-loadstore-load.c <p>\u4ee3\u7801\u793a\u4f8b\uff1a\u7ebf\u7a0b\u95f4\u7684\u5185\u5b58\u53ef\u89c1\u6027</p> <p>\u4e3a\u4e86\u63d0\u9ad8\u5171\u4eab\u5185\u5b58\u7cfb\u7edf\u7684\u6027\u80fd\uff0c\u7cfb\u7edf\u4e2d\u5e76\u975e\u53ea\u6709\u4e00\u4e2a \u201c\u5168\u5c40\u5171\u4eab\u5185\u5b58\u201d\u3002\u6bcf\u4e2a\u5904\u7406\u5668\u90fd\u6709\u81ea\u5df1\u7684\u7f13\u5b58\uff0c \u5e76\u4e14\u901a\u8fc7\u786c\u4ef6\u5b9e\u73b0\u7684\u534f\u8bae\u7ef4\u62a4\u4e00\u81f4\u6027\u3002\u5728 x86 \u591a\u5904\u7406\u5668\u7cfb\u7edf\u4e2d\uff0c\u5141\u8bb8 store \u65f6\u6682\u65f6\u5199\u5165\u5904\u7406\u5668\u672c \u5730\u7684 store buffer\uff0c\u4ece\u800c\u5ef6\u8fdf\u5bf9\u5176\u4ed6\u5904\u7406\u5668\u7684\u53ef\u89c1\u6027\u3002</p> <pre><code>#include \"thread.h\"\n#include &lt;stdatomic.h&gt;\n\nint x = 0, y = 0;\n\natomic_int flag;\n#define FLAG atomic_load(&amp;flag)\n#define FLAG_XOR(val) atomic_fetch_xor(&amp;flag, val)\n#define WAIT_FOR(cond) while (!(cond)) ;\n\n__attribute__((noinline))\nvoid write_x_read_y() {\n    int y_val;\n    asm volatile(\n        \"movl $1, %0;\" // x = 1\n        \"movl %2, %1;\" // y_val = y\n        : \"=m\"(x), \"=r\"(y_val) : \"m\"(y)\n    );\n    printf(\"%d \", y_val);\n}\n\n__attribute__((noinline))\nvoid write_y_read_x() {\n    int x_val;\n    asm volatile(\n        \"movl $1, %0;\" // y = 1\n        \"movl %2, %1;\" // x_val = x\n        : \"=m\"(y), \"=r\"(x_val) : \"m\"(x)\n    );\n    printf(\"%d \", x_val);\n}\n\nvoid T1(int id) {\n    while (1) {\n        WAIT_FOR((FLAG &amp; 1));\n        write_x_read_y();\n        FLAG_XOR(1);\n    }\n}\n\nvoid T2() {\n    while (1) {\n        WAIT_FOR((FLAG &amp; 2));\n        write_y_read_x();\n        FLAG_XOR(2);\n    }\n}\n\nvoid Tsync() {\n    while (1) {\n        x = y = 0;\n        __sync_synchronize(); // full barrier\n        usleep(1);            // + delay\n        assert(FLAG == 0);\n        FLAG_XOR(3);\n        // T1 and T2 clear 0/1-bit, respectively\n        WAIT_FOR(FLAG == 0);\n        printf(\"\\n\"); fflush(stdout);\n    }\n}\n\nint main() {\n    create(T1);\n    create(T2);\n    create(Tsync);\n}\n</code></pre>"},{"location":"Category/SystemOperation/NJU/5.%20%E5%A4%9A%E5%A4%84%E7%90%86%E5%99%A8%E7%BC%96%E7%A8%8B%EF%BC%9A%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/#41","title":"4.1 \u73b0\u4ee3\u5904\u7406\u5668\u4e5f\u662f (\u52a8\u6001) \u7f16\u8bd1\u5668","text":"<p>\u9519\u8bef\u7684\u8ba4\u4e3a\uff1a\u4e00\u4e2a CPU \u6267\u884c\u4e00\u6761\u6307\u4ee4\u5230\u8fbe\u4e0b\u4e00\u72b6\u6001\u3002</p> <p>\u73b0\u4ee3\u7684CPU\u4f1a\u628a\u6c47\u7f16\u6307\u4ee4\u7ffb\u8bd1\u6210\u66f4\u5c0f\u7684\u4e2d\u95f4\u4ee3\u7801(uOp)\uff1b</p> <p>\u73b0\u4ee3\u5904\u7406\u5668\u53d6\u6307\u6267\u884c</p> <p>\u4e00\u4e2a\u65f6\u949f\u5468\u671f\u5185\u53ef\u80fd\u6267\u884c\u591a\u6761\u6307\u4ee4\uff0c\u4e5f\u5373\u662f\uff1a<code>IPC</code></p> <p>\u73b0\u4ee3\u7684\u5904\u7406\u5668\u548c\u7f16\u8bd1\u5668\u4e00\u6837\uff0cX86\u6709\u975e\u5e38\u590d\u6742\u7684\u8bd1\u7801\u524d\u7aef\uff0c\u4e5f\u4f1a\u5bf9\u4ee3\u7801\u8fdb\u884c\u4f18\u5316\uff1b</p> <p><pre><code>// &lt;-----------+\nx = 1; //      |\ny = 1; // -----+\n</code></pre> x, y \u5728\u5185\u5b58\u7684\u4e0d\u540c\u5730\u5740\u5904\uff0c\u76f8\u4e92\u4e4b\u95f4\u6ca1\u4ec0\u4e48\u4f9d\u8d56\uff0c\u56e0\u6b64\u987a\u5e8f\u5e76\u4e0d\u91cd\u8981\uff0c\u5904\u7406\u5668\u53ef\u4ee5\u8fdb\u884c\u4f18\u5316\uff0c\u8c03\u6362\u5b83\u4eec\u7684\u6267\u884c\u987a\u5e8f\uff1b</p> <p>B\u7ad9\u5f39\u5e55\u4e2d\u8fd8\u6709\u53e6\u5916\u4e00\u79cd\u8bf4\u6cd5</p> <ul> <li>\u5373\u4f7f\u5730\u5740\u4e0d\u540c\u4e5f\u4e0d\u80fd\u505a\u6307\u4ee4\u4ea4\u6362\uff0c\u4e0d\u8bba\u662f\u5f3a\u5185\u5b58\u6a21\u578b\u8fd8\u662f\u5f31\u5185\u5b58\u6a21\u578b\uff0c\u53ef\u4ee5\u4ea4\u6362\u7684\u662f\u5185\u5b58\u7684\u53ef\u89c1\u6027\uff0c\u800c\u4e0d\u662f\u6307\u4ee4\u6267\u884c\u7684\u987a\u5e8f\uff1b</li> <li>\u4e0d\u7ba1\u5f3a\u5f31\u5185\u5b58\u6a21\u578b\uff0c\u5185\u5b58\u53ef\u89c1\u6027\u9700\u8981fence\u548cbarrier\u6765\u4fdd\u8bc1\uff1b</li> </ul>"},{"location":"Category/SystemOperation/NJU/5.%20%E5%A4%9A%E5%A4%84%E7%90%86%E5%99%A8%E7%BC%96%E7%A8%8B%EF%BC%9A%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/#42-relaxedweak-memory-model","title":"4.2 \u5bbd\u677e\u5185\u5b58\u6a21\u578b (Relaxed/Weak Memory Model)","text":"<p>Promising 2.0\uff1a\u5bbd\u677e\u5185\u5b58\u5e76\u53d1\u4e2d\u7684\u5168\u5c40\u4f18\u5316</p> <ol> <li> <p>\u64cd\u4f5c\u7cfb\u7edf\uff1a\u8bbe\u8ba1\u4e0e\u5b9e\u73b0 (2023 \u6625\u5b63\u5b66\u671f) \u21a9</p> </li> <li> <p>5. \u591a\u5904\u7406\u5668\u7f16\u7a0b\uff1a\u4ece\u5165\u95e8\u5230\u653e\u5f03 \u21a9</p> </li> <li> <p>\u591a\u5904\u7406\u5668\u7f16\u7a0b\uff1a\u4ece\u5165\u95e8\u5230\u653e\u5f03 (\u7ebf\u7a0b\u5e93\u3001\u73b0\u4ee3\u5904\u7406\u5668\u67b6\u6784\u3001\u5bbd\u677e\u5185\u5b58\u6a21\u578b) [\u5357\u4eac\u5927\u5b662023\u64cd\u4f5c\u7cfb\u7edf-P5] (\u848b\u708e\u5ca9) \u21a9</p> </li> <li> <p>Compiler Explorer \u21a9</p> </li> <li> <p>\u3010uOps\u54f2\u5b66\u4e09\u95ee\u3011\u6211\u662f\u8c01\uff1f\u2014\u2014\u5e26\u4f60\u68b3\u7406x86\u5fae\u67b6\u6784 \u21a9</p> </li> </ol>"},{"location":"Category/SystemOperation/NJU/6.%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E5%9F%BA%E7%A1%80/","title":"6.\u5e76\u53d1\u63a7\u5236\u57fa\u7840","text":""},{"location":"Category/SystemOperation/NJU/6.%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E5%9F%BA%E7%A1%80/#0x01-peterson","title":"0x01 \u4e92\u65a5\u95ee\u9898\u548c Peterson \u7b97\u6cd5","text":""},{"location":"Category/SystemOperation/NJU/6.%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E5%9F%BA%E7%A1%80/#_1","title":"\u4e92\u65a5","text":"<p>\u63d2\u5165 \u201c\u795e\u79d8\u4ee3\u7801\u201d\uff0c\u4f7f\u5f97\u6240\u6709\u5176\u4ed6 \u201c\u795e\u79d8\u4ee3\u7801\u201d \u90fd\u4e0d\u80fd\u5e76\u53d1</p> <pre><code>void Tsum() {\n  stop_the_world();\n  // \u4e34\u754c\u533a critical section\n  sum++;\n  resume_the_world();\n}\n</code></pre> <p>Stop the world \u771f\u7684\u662f\u53ef\u80fd\u7684:</p> <ul> <li>Java \u6709 \u201cstop the world GC\u201d</li> <li>\u5355\u4e2a\u5904\u7406\u5668\u53ef\u4ee5\u5173\u95ed\u4e2d\u65ad</li> <li>\u591a\u4e2a\u5904\u7406\u5668\u4e5f\u53ef\u4ee5\u53d1\u9001\u6838\u95f4\u4e2d\u65ad</li> </ul>"},{"location":"Category/SystemOperation/NJU/6.%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E5%9F%BA%E7%A1%80/#_2","title":"\u5931\u8d25\u7684\u5c1d\u8bd5","text":"<pre><code>int locked = UNLOCK;\n\nvoid critical_section() {\nretry:\n  if (locked != UNLOCK) {\n    goto retry;\n  }\n  locked = LOCK;\n\n  // critical section\n\n  locked = UNLOCK;\n}\n</code></pre> <p>\u5e76\u53d1\u7a0b\u5e8f\u4e0d\u80fd\u4fdd\u8bc1 load + store \u7684\u539f\u5b50\u6027</p>"},{"location":"Category/SystemOperation/NJU/6.%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E5%9F%BA%E7%A1%80/#_3","title":"\u66f4\u4e25\u8083\u5730\u5c1d\u8bd5\uff1a\u786e\u5b9a\u5047\u8bbe\u3001\u8bbe\u8ba1\u7b97\u6cd5","text":"<p>\u5047\u8bbe\uff1a\u5185\u5b58\u7684\u8bfb/\u5199\u53ef\u4ee5\u4fdd\u8bc1\u987a\u5e8f\u3001\u539f\u5b50\u5b8c\u6210</p> <ul> <li>val = atomic_load(ptr)<ul> <li>\u770b\u4e00\u773c\u67d0\u4e2a\u5730\u65b9\u7684\u5b57\u6761 (\u53ea\u80fd\u770b\u5230\u77ac\u95f4\u7684\u5b57)</li> <li>\u521a\u770b\u5b8c\u5c31\u53ef\u80fd\u88ab\u6539\u6389</li> </ul> </li> <li>atomic_store(ptr, val)<ul> <li>\u5bf9\u5e94\u5f80\u67d0\u4e2a\u5730\u65b9 \u201c\u8d34\u4e00\u5f20\u7eb8\u6761\u201d (\u5fc5\u987b\u95ed\u773c\u76f2\u8d34)</li> <li>\u8d34\u5b8c\u4e00\u77ac\u95f4\u5c31\u53ef\u80fd\u88ab\u522b\u4eba\u8986\u76d6</li> </ul> </li> </ul>"},{"location":"Category/SystemOperation/NJU/6.%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E5%9F%BA%E7%A1%80/#peterson","title":"Peterson \u7b97\u6cd5","text":"<p>A \u548c B \u4e89\u7528\u5395\u6240\u7684\u5305\u53a2</p> <ul> <li>\u60f3\u8fdb\u5165\u5305\u53a2\u4e4b\u524d\uff0cA/B \u90fd\u9996\u5148\u4e3e\u8d77\u81ea\u5df1\u7684\u65d7\u5b50<ul> <li>A \u5f80\u5395\u6240\u95e8\u4e0a\u8d34\u4e0a \u201cB \u6b63\u5728\u4f7f\u7528\u201d \u7684\u6807\u7b7e</li> <li>B \u5f80\u5395\u6240\u95e8\u4e0a\u8d34\u4e0a \u201cA \u6b63\u5728\u4f7f\u7528\u201d \u7684\u6807\u7b7e</li> </ul> </li> <li>\u7136\u540e\uff0c\u5982\u679c\u5bf9\u65b9\u4e3e\u7740\u65d7\uff0c\u4e14\u95e8\u4e0a\u7684\u540d\u5b57\u662f\u5bf9\u65b9\uff0c\u7b49\u5f85<ul> <li>\u5426\u5219\u53ef\u4ee5\u8fdb\u5165\u5305\u53a2</li> </ul> </li> <li>\u51fa\u5305\u53a2\u540e\uff0c\u653e\u4e0b\u81ea\u5df1\u7684\u65d7\u5b50 (\u5b8c\u5168\u4e0d\u7ba1\u95e8\u4e0a\u7684\u6807\u7b7e)</li> </ul>"},{"location":"Category/SystemOperation/NJU/6.%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E5%9F%BA%E7%A1%80/#_4","title":"\u679a\u4e3e\u72b6\u6001","text":"<p>\u679a\u4e3e\u72b6\u6001\u673a\u7684\u5168\u90e8\u72b6\u6001 (PC<sub>1</sub>, PC<sub>2</sub>, x, y, turn)</p> <pre><code>void TA() { while (1) {\n/* \u2776 */  x = 1;\n/* \u2777 */  turn = B;\n/* \u2778 */  while (y &amp;&amp; turn == B) ;\n/* \u2779 */  x = 0; } }\n\nvoid TB() { while (1) {\n/* \u2460 */  y = 1;\n/* \u2461 */  turn = A;\n/* \u2462 */  while (x &amp;&amp; turn == A) ;\n/* \u2463 */  y = 0; } }\n</code></pre>"},{"location":"Category/SystemOperation/NJU/6.%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E5%9F%BA%E7%A1%80/#checker","title":"checker","text":"model checkerpeterson.pymosaic.py <p>\u4ee5\u4e0b\u7ed3\u679c\u53ef\u4ee5\u770b\u5230\uff1a\u5355\u7eaf\u7684\u6309\u7167\u6559\u79d1\u4e66\u4e0a\u7684\u5b9e\u73b0\u8fd8\u662f\u6709\u5f88\u5927\u95ee\u9898\u7684</p> <pre><code>python3 mosaic.py -c peterson.py | grep stdout | sort | uniq -c\n12       \"stdout\": \"\",\n 4       \"stdout\": \"\u2776\",\n 4       \"stdout\": \"\u2777\",\n 1       \"stdout\": \"\u2776\u2777\",\n 1       \"stdout\": \"\u2777\u2776\",\n</code></pre> <pre><code>def T1():\n  while heap.lock != '\u2705':\n    sys_sched()\n  sys_sched()\n  heap.lock = '\u274c'\n  sys_write('\u2776')\n\ndef T2():\n  while heap.lock != '\u2705':\n    sys_sched()\n  sys_sched()\n  heap.lock = '\u274c'\n  sys_write('\u2777')\n\ndef main():\n  heap.lock = '\u2705'\n  sys_spawn(T1)\n  sys_spawn(T2)\n\n# Outputs:\n# \u2776\u2777\n# \u2777\u2776\n</code></pre> <pre><code>#!/usr/bin/env python3\n\n# Mosaic Emulator and Checker\n\nimport argparse\nimport ast\nimport copy\nimport inspect\nimport json\nimport random\nfrom dataclasses import dataclass\nfrom itertools import compress, product\nfrom pathlib import Path\nfrom typing import Callable, Generator\n\n## 1. Mosaic system calls\n\n### 1.1 Process, thread, and context switching\n\nsys_fork = lambda: os.sys_fork()\nsys_spawn = lambda fn, *args: os.sys_spawn(fn, *args)\nsys_sched = lambda: os.sys_sched()\n\n### 1.2 Virtual character device\n\nsys_choose = lambda choices: os.sys_choose(choices)\nsys_write = lambda *args: os.sys_write(*args)\n\n### 1.3 Virtual block storage device\n\nsys_bread = lambda k: os.sys_bread(k)\nsys_bwrite = lambda k, v: os.sys_bwrite(k, v)\nsys_sync = lambda: os.sys_sync()\nsys_crash = lambda: os.sys_crash()\n\n### 1.4 System call helpers\n\nSYSCALLS = []\n\ndef syscall(func):  # @syscall decorator\n    SYSCALLS.append(func.__name__)\n    return func\n\n## 2. Mosaic operating system emulator\n\n### 2.1 Data structures\n\nclass Heap:\n    pass  # no member: self.__dict__ is the heap\n\n@dataclass\nclass Thread:\n    context: Generator  # program counter, local variables, etc.\n    heap: Heap  # a pointer to thread's \"memory\"\n\n@dataclass\nclass Storage:\n    persist: dict  # persisted storage state\n    buf: dict  # outstanding operations yet to be persisted\n\n### 2.2 The OperatingSystem class\n\nclass OperatingSystem:\n    \"\"\"An executable operating system model.\n\n    The operating system model hosts a single Python application with a\n    main() function accessible to a shared heap and 9 system calls\n    (marked by the @syscall decorator). An example:\n\n        def main():\n            pid = sys_fork()\n            sys_sched()  # non-deterministic context switch\n            if pid == 0:\n                sys_write('World')\n            else:\n                sys_write('Hello')\n\n    At any moment, this model keeps tracking a set of threads and a\n    \"currently running\" one. Each thread consists of a reference to a\n    heap object (may be shared with other threads) and a private context\n    (program counters, local variables, etc.). A thread context is a\n    Python generator object, i.e., a stack-less coroutine [1] that can\n    save the running context and yield itself.\n\n    For applications, the keyword \"yield\" is reserved for system calls.\n    For example, a \"choose\" system call [2]:\n\n        sys_choose(['A', 'B'])\n\n    is transpiled as yielding the string \"sys_choose\" followed by its\n    parameters (choices):\n\n        res = yield 'sys_choose', ['A', 'B'].\n\n    Yield will transfer the control to the OS for system call handling\n    and eventually returning a value ('A' or 'B') to the application.\n\n    Right after transferring control to the OS by \"yield\", the function\n    state is \"frozen\", where program counters and local variables are\n    accessible via the generator object. Therefore, OS can serialize its\n    internal state--all thread's contexts, heaps, and virtual device\n    states at this moment.\n\n    In this sense, operating system is a system-call driven state\n    transition system:\n\n        (s0) --run first thread (main)-&gt; (s1)\n            --sys_choose and application execution-&gt; (s2)\n            --sys_sched and application execution-&gt; (s3) ...\n\n    Real operating systems can be preemptive--context switching can\n    happen non-deterministically at any program point, simply because\n    processor can non-deterministically interrupt its currently running\n    code and transfer the control to the operating system.\n\n    The OS internal implementation does NOT immediately process the\n    system call: it returns all possible choices available at the moment\n    and their corresponding processing logic as callbacks. For the\n    example above, the \"choose\" system call returns a non-deterministic\n    choice among given choices. The internal implementation thus returns\n\n        choices = {\n            'A': (lambda: 'A'),\n            'B': (lambda: 'B'),\n        }\n\n    for later processing. Another example is non-deterministic context\n    switching by yielding 'sys_sched'. Suppose there are threads t1 and\n    t2 at the moment. The system call handler will return\n\n        choices = {\n            't1': (lambda: switch_to(t1)),\n            't2': (lambda: switch_to(t2)),\n        }\n\n    in which switch_to(th) replaces the OS's current running thread with\n    th (changes the global \"heap\" variable). Such deferred execution of\n    system calls separates the mechanism of non-deterministic choices\n    from the actual decision makers (e.g., an interpreter or a model\n    checker). Once the decision is made, the simply call step(choice)\n    and the OS will execute this choice by\n\n        choices[choice]()\n\n    with the application code (generator) being resumed.\n\n    This model provides \"write\" system call to immediately push data to\n    a hypothetical character device like a tty associated with stdout.\n    We model a block device (key-value store) that may lose data upon\n    crash. The model assumes atomicity of each single block write (a\n    key-value update). However, writes are merely to a volatile buffer\n    which may non-deterministically lose data upon crash 3]. The \"sync\"\n    system call persists buffered writes.\n\n    References:\n\n    [1] N. Schemenauer, T. Peters, and M. L. Hetland. PEP 255 -\n        Simple generators. https://peps.python.org/pep-0255/\n    [2] J. Yang, C. Sar, and D. Engler. eXplode: a lightweight, general\n        system for finding serious storage system errors. OSDI'06.\n    [3] T. S. Pillai, V. Chidambaram, R. Alagappan, A. Al-Kiswany, A. C.\n        Arpaci-Dusseau, and R. H. Arpaci-Dusseau. All file systems are\n        not created equal: On the complexity of crafting crash\n        consistent applications. OSDI'14.\n    \"\"\"\n\n    def __init__(self, init: Callable):\n        \"\"\"Create a new OS instance with pending-to-execute init thread.\"\"\"\n        # Operating system states\n        self._threads = [Thread(context=init(), heap=Heap())]\n        self._current = 0\n        self._choices = {init.__name__: lambda: None}\n        self._stdout = ''\n        self._storage = Storage(persist={}, buf={})\n\n        # Internal states\n        self._init = init\n        self._trace = []\n        self._newfork = set()\n\n### 2.3 System call implementation\n\n#### 2.3.1 Process, thread, and context switching\n\n    @syscall\n    def sys_spawn(self, func: Callable, *args):\n        \"\"\"Spawn a heap-sharing new thread executing func(args).\"\"\"\n        def do_spawn():\n            self._threads.append(\n                Thread(\n                    context=func(*args),  # func() returns a new generator\n                    heap=self.current().heap,  # shared heap\n                )\n            )\n        return {'spawn': (lambda: do_spawn())}\n\n    @syscall\n    def sys_fork(self):\n        \"\"\"Create a clone of the current thread with a copied heap.\"\"\"\n        if all(not f.frame.f_locals['fork_child']\n                for f in inspect.stack()\n                    if f.function == '_step'):  # this is parent; do fork\n            # Deep-copying generators causes troubles--they are twined with\n            # Python's runtime state. We use an (inefficient) hack here: replay \n            # the entire trace and override the last fork() to avoid infinite\n            # recursion.\n            os_clone = OperatingSystem(self._init)\n            os_clone.replay(self._trace[:-1])\n            os_clone._step(self._trace[-1], fork_child=True)\n\n            # Now os_clone._current is the forked process. Cloned thread just \n            # yields a sys_fork and is pending for fork()'s return value. It\n            # is necessary to mark cloned threads (in self._newfork) and send\n            # child's fork() return value when they are scheduled for the\n            # first time.\n            def do_fork():\n                self._threads.append(os_clone.current())\n                self._newfork.add((pid := len(self._threads)) - 1)\n                return 1000 + pid  # returned pid starts from 1000\n\n            return {'fork': (lambda: do_fork())}\n        else:\n            return None  # overridden fork; this value is never used because\n                        # os_clone is destroyed immediately after fork()\n\n    @syscall\n    def sys_sched(self):\n        \"\"\"Return a non-deterministic context switch to a runnable thread.\"\"\"\n        return {\n            f't{i+1}': (lambda i=i: self._switch_to(i))\n                for i, th in enumerate(self._threads)\n                    if th.context.gi_frame is not None  # thread still alive?\n        }\n\n### 2.3.2 Virtual character device (byte stream)\n\n    @syscall\n    def sys_choose(self, choices):\n        \"\"\"Return a non-deterministic value from choices.\"\"\"\n        return {f'choose {c}': (lambda c=c: c) for c in choices}\n\n    @syscall\n    def sys_write(self, *args):\n        \"\"\"Write strings (space separated) to stdout.\"\"\"\n        def do_write():\n            self._stdout += ' '.join(str(arg) for arg in args)\n        return {'write': (lambda: do_write())}\n\n### 2.3.3 Virtual block storage device\n\n    @syscall\n    def sys_bread(self, key):\n        \"\"\"Return the specific key's associated value in block device.\"\"\"\n        storage = self._storage\n        return {'bread': (lambda:\n            storage.buf.get(key,  # always try to read from buffer first\n                storage.persist.get(key, None)  # and then persistent storage\n            )\n        )}\n\n    @syscall\n    def sys_bwrite(self, key, value):\n        \"\"\"Write (key, value) pair to block device's buffer.\"\"\"\n        def do_bwrite():\n            self._storage.buf[key] = value\n        return {'bwrite': (lambda: do_bwrite())}\n\n    @syscall\n    def sys_sync(self):\n        \"\"\"Persist all buffered writes.\"\"\"\n        def do_sync():\n            store = self._storage\n            self._storage = Storage(\n                persist=store.persist | store.buf,  # write back\n                buf={}\n            )\n        return {'sync': (lambda: do_sync())}\n\n    @syscall\n    def sys_crash(self):\n        \"\"\"Simulate a system crash that non-deterministically persists\n        outstanding writes in the buffer.\n        \"\"\"\n        persist = self._storage.persist\n        btrace = self._storage.buf.items()  # block trace\n\n        crash_sites = (\n            lambda subset=subset:\n                setattr(self, '_storage',\n                    Storage(  # persist only writes in the subset\n                        persist=persist | dict(compress(btrace, subset)),\n                        buf={}\n                    )\n                ) for subset in  # Mosaic allows persisting any subset of\n                    product(     # pending blocks in the buffer\n                        *([(0, 1)] * len(btrace))\n                    )\n        )\n        return dict(enumerate(crash_sites))\n\n### 2.4 Operating system as a state machine\n\n    def replay(self, trace: list) -&gt; dict:\n        \"\"\"Replay an execution trace and return the resulting state.\"\"\"\n        for choice in trace:\n            self._step(choice)\n        return self.state_dump()\n\n    def _step(self, choice, fork_child=False):\n        self._switch_to(self._current)\n        self._trace.append(choice)  # keep all choices for replay-based fork()\n        action = self._choices[choice]  # return value of sys_xxx: a lambda\n        res = action()\n\n        try:  # Execute current thread for one step\n            func, args = self.current().context.send(res)\n            assert func in SYSCALLS\n            self._choices = getattr(self, func)(*args)\n        except StopIteration:  # ... and thread terminates\n            self._choices = self.sys_sched()\n\n        # At this point, the operating system's state is\n        #   (self._threads, self._current, self._stdout, self._storage)\n        # and outgoing transitions are saved in self._choices.\n\n### 2.5 Misc and helper functions\n\n    def state_dump(self) -&gt; dict:\n        \"\"\"Create a serializable Mosaic state dump with hash code.\"\"\"\n        heaps = {}\n        for th in self._threads:\n            if (i := id(th.heap)) not in heaps:  # unique heaps\n                heaps[i] = len(heaps) + 1\n\n        os_state = {\n            'current': self._current,\n            'choices': sorted(list(self._choices.keys())),\n            'contexts': [\n                {\n                    'name': th.context.gi_frame.f_code.co_name,\n                    'heap': heaps[id(th.heap)],  # the unique heap id\n                    'pc': th.context.gi_frame.f_lineno,\n                    'locals': th.context.gi_frame.f_locals,\n                } if th.context.gi_frame is not None else None\n                    for th in self._threads\n            ],\n            'heaps': {\n                heaps[id(th.heap)]: th.heap.__dict__\n                    for th in self._threads\n            },\n            'stdout': self._stdout,\n            'store_persist': self._storage.persist,\n            'store_buffer': self._storage.buf,\n        }\n\n        h = hash(json.dumps(os_state, sort_keys=True)) + 2**63\n        return (copy.deepcopy(os_state)  # freeze the runtime state\n                | dict(hashcode=f'{h:016x}'))\n\n    def current(self) -&gt; Thread:\n        \"\"\"Return the current running thread object.\"\"\"\n        return self._threads[self._current]\n\n    def _switch_to(self, tid: int):\n        self._current = tid\n        globals()['os'] = self\n        globals()['heap'] = self.current().heap\n        if tid in self._newfork:\n            self._newfork.remove(tid)  # tricky: forked process must receive 0\n            return 0                   # to indicate a child\n\n## 3. The Mosaic runtime\n\nclass Mosaic:\n    \"\"\"The operating system interpreter and model checker.\n\n    The operating system model is a state transition system: os.replay()\n    maps any trace to a state (with its outgoing transitions). Based\n    on this model, two state space explorers are implemented:\n\n    - run:   Choose outgoing transitions uniformly at random, yielding a\n            single execution trace.\n    - check: Exhaustively explore all reachable states by a breadth-\n            first search. Duplicated states are not visited twice.\n\n    Both explorers produce the visited portion of the state space as a\n    serializable object containing:\n\n    - source:   The application source code\n    - vertices: A list of operating system state dumps. The first vertex\n                in the list is the initial state. Each vertex has a\n                unique \"hashcode\" id.\n    - edges:    A list of 3-tuples: (source, target, label) denoting an \n                explored source --[label]-&gt; target edge. Both source and\n                target are state hashcode ids.\n    \"\"\"\n\n### 3.1 Model interpreter and checker\n\n    def run(self) -&gt; dict:\n        \"\"\"Interpret the model with non-deterministic choices.\"\"\"\n        os = OperatingSystem(self.entry)\n        V, E = [os.state_dump() | dict(depth=0)], []\n\n        while (choices := V[-1]['choices']):\n            choice = random.choice(choices)  # uniformly at random\n            V.append(os.replay([choice]) | dict(depth=len(V)))\n            E.append((V[-2]['hashcode'], V[-1]['hashcode'], choice))\n\n        return dict(source=self.src, vertices=V, edges=E)\n\n    def check(self) -&gt; dict:\n        \"\"\"Exhaustively explore the state space.\"\"\"\n        class State:\n            entry = self.entry\n\n            def __init__(self, trace):\n                self.trace = trace\n                self.state = OperatingSystem(State.entry).replay(trace)\n                self.state |= dict(depth=0)\n                self.hashcode = self.state['hashcode']\n\n            def extend(self, c):\n                st = State(self.trace + (c,))\n                st.state = st.state | dict(depth=self.state['depth'] + 1)\n                return st\n\n        st0 = State(tuple())  # initial state of empty trace\n        queued, V, E = [st0], {st0.hashcode: st0.state}, []\n\n        while queued:\n            st = queued.pop(0)\n            for choice in st.state['choices']:\n                st1 = st.extend(choice)\n                if st1.hashcode not in V:  # found an unexplored state\n                    V[st1.hashcode] = st1.state\n                    queued.append(st1)\n                E.append((st.hashcode, st1.hashcode, choice))\n\n        return dict(\n            source=self.src,\n            vertices=sorted(V.values(), key=lambda st: st['depth']),\n            edges=E\n        )\n\n### 3.1 Source code parsing and rewriting\n\n    class Transformer(ast.NodeTransformer):\n        def visit_Call(self, node):\n            # Rewrite system calls as yields\n            if (isinstance(node.func, ast.Name) and\n                    node.func.id in SYSCALLS):  # rewrite system calls\n                return ast.Yield(ast.Tuple(     #   -&gt; yield ('sys_xxx', args)\n                    elts=[\n                        ast.Constant(value=node.func.id),\n                        ast.Tuple(elts=node.args),\n                    ]\n                ))\n            else:\n                return node\n\n    def __init__(self, src: str):\n        tree = ast.parse(src)\n        hacked_ast = self.Transformer().visit(tree)\n        hacked_src = ast.unparse(hacked_ast)\n\n        context = {}\n        exec(hacked_src, globals(), context)\n        globals().update(context)\n\n        self.src = src\n        self.entry = context['main']  # must have a main()\n\n## 4. Utilities\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser(\n        description='The modeled operating system and state explorer.'\n    )\n    parser.add_argument(\n        'source',\n        help='application code (.py) to be checked; must have a main()'\n    )\n    parser.add_argument('-r', '--run', action='store_true')\n    parser.add_argument('-c', '--check', action='store_true')\n    args = parser.parse_args()\n\n    src = Path(args.source).read_text()\n    mosaic = Mosaic(src)\n    if args.check:\n        explored = mosaic.check()\n    else:\n        explored = mosaic.run()  # run is the default option\n\n    # Serialize the explored states and write to stdout. This encourages piping\n    # the results to another tool following the UNIX philosophy. Examples:\n    #\n    #   mosaic --run foo.py | grep stdout | tail -n 1  # quick and dirty check\n    #   mosaic --check bar.py | fx  # or any other interactive visualizer\n    #\n    print(json.dumps(explored, ensure_ascii=False, indent=2))\n</code></pre>"},{"location":"Category/SystemOperation/NJU/6.%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E5%9F%BA%E7%A1%80/#0x02-peterson","title":"0x02 Peterson \u7b97\u6cd5\u7684\u6b63\u786e\u6027\u548c\u6a21\u578b\u68c0\u9a8c","text":"model checker\u6a21\u578b\u68c0\u9a8cPeterson \u5b9e\u73b0peterson.c <p>checker</p> <p>Peterson \u7b97\u6cd5\u6bd4\u90a3\u4e9b \u201c\u73a9\u5177\u201d \u7684\u4f8b\u5b50\u590d\u6742\u5f97\u591a\uff0c\u201c\u968f\u65f6\u968f\u5730\u201d \u90fd\u6709\u53d1\u751f\u7ebf\u7a0b\u5207\u6362\u7684\u53ef\u80fd\u6027\u3002\u8fd9\u4e9b\u53ef\u80fd\u6027\u5bf9\u4e8e\u624b\u5de5\u679a\u4e3e\u6765\u8bf4\uff0c\u5df2\u7ecf\u6709\u4e9b\u592a\u8fc7\u7410\u788e\u4e86\u2014\u2014\u8fd9\u4e5f\u662f\u5728\u5f88\u957f\u4e00\u6bb5\u65f6\u95f4\u91cc\uff0c\u5927\u5bb6\u7ed9\u51fa\u9519\u8bef\u4e92\u65a5\u7b97\u6cd5\u7684\u539f\u56e0\u3002\u800c\u8bf8\u5982 \u201cx, y, turn\u201d\u3001\u201c0\u30011\u201d \u8fd9\u4e9b\u62bd\u8c61\u7684\u6570\u503c\uff0c\u8fdb\u4e00\u6b65\u589e\u52a0\u4e86\u4eba\u8111\u5728\u601d\u8003\u8fd9\u4e9b\u95ee\u9898\u65f6\u7684\u8d1f\u62c5\u3002\u6211\u4eec\u4f7f\u7528 Emoji \u6765\u7f13\u89e3\u8fd9\u4e00\u70b9\u2014\u2014\u4f8b\u5982\u7528 \ud83c\udff4 \u8868\u793a\u7b2c\u4e00\u4e2a\u7ebf\u7a0b\u4e3e\u8d77\u65d7\u5b50\u5e0c\u671b\u8fdb\u5165\u4e34\u754c\u533a\u3002\u8fd9\u6bd4 x = 1 \u8981\u66f4\u76f4\u89c2\u3002</p> <pre><code>python3 mosaic.py -c peterson.py | grep cs | sort | uniq -c\n 577           \"cs\": \"\"\n  38           \"cs\": \"\u2776\"\n  34           \"cs\": \"\u2777\"\n</code></pre> <pre><code>def T1():\n  while True:\n    heap.x = '\ud83c\udff4'\n    sys_sched()\n    heap.turn = '\u2777'\n    sys_sched()\n    while True:\n      t = heap.turn\n      sys_sched()\n      y = heap.y != ''\n      sys_sched()\n      if not y or t == '\u2776':\n        break\n    sys_sched()\n    heap.cs += '\u2776'\n    sys_sched()\n    heap.cs = heap.cs.replace('\u2776', '')\n    sys_sched()\n    heap.x = ''\n    sys_sched()\n\ndef T2():\n  while True:\n    heap.y = '\ud83c\udfc1'\n    sys_sched()\n    heap.turn = '\u2776'\n    sys_sched()\n    while True:\n      t = heap.turn\n      sys_sched()\n      x = heap.x\n      sys_sched()\n      if not x or t == '\u2777':\n        break\n      sys_sched()\n    sys_sched()\n    heap.cs += '\u2777'\n    sys_sched()\n    heap.cs = heap.cs.replace('\u2777', '')\n    sys_sched()\n    heap.y = ''\n    sys_sched()\n\ndef main():\n  heap.x = ''\n  heap.y = ''\n  heap.turn = ''\n  heap.cs = ''\n  sys_spawn(T1)\n  sys_spawn(T2)\n</code></pre> <p>\u4ee3\u7801\u793a\u4f8b\uff1aPeterson \u7b97\u6cd5\u5b9e\u73b0</p> <p>\u5728\u73b0\u4ee3\u591a\u5904\u7406\u5668\u7cfb\u7edf\u4e0a\uff0c\u6211\u4eec\u9762\u4e34\u7f16\u8bd1\u5668\u3001\u5904\u7406\u5668\u7684\u53cc\u91cd\u590d\u6742\u884c\u4e3a\u3002\u56e0\u6b64\uff0c\u5728\u73b0\u4ee3\u591a\u5904\u7406\u5668\u7cfb\u7edf\u4e0a\u5b9e\u73b0 \u201c\u6b63\u786e\u201d \u7684 Peterson \u7b97\u6cd5\u5e76\u4e0d\u662f\u4e00\u9879\u7b80\u5355\u7684\u4efb\u52a1\u3002</p> <p>\u5bf9\u4e8e \u201c\u5230\u5e95\u54ea\u4e00\u4e2a barrier \u662f\u4e0d\u53ef\u7f3a\u5c11\u201d \u8fd9\u4e2a\u95ee\u9898\u5df2\u7ecf\u8d85\u51fa\u4e86\u672c\u95e8\u8bfe\u7a0b\u7684\u8ba8\u8bba\u8303\u56f4\u3002\u6211\u4eec\u8bd5\u56fe\u7528\u8fd9\u4e2a\u4f8b\u5b50\u5411\u5927\u5bb6\u4f20\u9012\u4e00\u4e2a\u601d\u60f3\uff1a\u9664\u975e\u4f60\u5bf9\u591a\u5904\u7406\u5668\u5e76\u53d1\u6709\u8db3\u591f\u7684\u7406\u89e3\uff0c\u8bf7\u4e0d\u8981\u81ea\u4f5c\u4e3b\u5f20\u5199\u806a\u660e\u7684\u5e76\u53d1\u7a0b\u5e8f\u3002\u5728 99.9% \u7684\u60c5\u51b5\u4e0b\uff0c\u4f60\u90fd\u53ef\u4ee5\u5728\u4e0d\u89e6\u53ca\u6b64\u7c7b\u5e95\u5c42\u884c\u4e3a\u7684\u524d\u63d0\u4e0b\u4f18\u5316\u4f60\u7684\u4ee3\u7801\u3002</p> <pre><code>#include \"thread.h\"\n\n#define A 1\n#define B 2\n\n#define BARRIER __sync_synchronize()\n\natomic_int nested;\natomic_long count;\n\nvoid critical_section() {\n  long cnt = atomic_fetch_add(&amp;count, 1);\n  int i = atomic_fetch_add(&amp;nested, 1) + 1;\n  if (i != 1) {\n    printf(\"%d threads in the critical section @ count=%ld\\n\", i, cnt);\n    assert(0);\n  }\n  atomic_fetch_add(&amp;nested, -1);\n}\n\nint volatile x = 0, y = 0, turn;\n\nvoid TA() {\n  while (1) {\n    x = 1;                   BARRIER;\n    turn = B;                BARRIER; // &lt;- this is critcal for x86\n    while (1) {\n      if (!y) break;         BARRIER;\n      if (turn != B) break;  BARRIER;\n    }\n    critical_section();\n    x = 0;                   BARRIER;\n  }\n}\n\nvoid TB() {\n  while (1) {\n    y = 1;                   BARRIER;\n    turn = A;                BARRIER;\n    while (1) {\n      if (!x) break;         BARRIER;\n      if (turn != A) break;  BARRIER;\n    }\n    critical_section();\n    y = 0;                   BARRIER;\n  }\n}\n\nint main() {\n  create(TA);\n  create(TB);\n}\n</code></pre>"},{"location":"Category/SystemOperation/NJU/6.%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E5%9F%BA%E7%A1%80/#0x03","title":"0x03 \u5b9e\u73b0\u5e76\u53d1\u63a7\u5236\u7684\u786c\u4ef6\u548c\u7f16\u8bd1\u5668\u673a\u5236","text":"<p>\u666e\u901a\u7684\u53d8\u91cf\u8bfb\u5199\u5728\u7f16\u8bd1\u5668 + \u5904\u7406\u5668\u7684\u53cc\u91cd\u4f18\u5316\u4e0b\u884c\u4e3a\u53d8\u5f97\u590d\u6742</p> <p><pre><code>retry:\n  if (locked != UNLOCK) {\n    goto retry;\n  }\n  locked = LOCK;\n</code></pre> \u89e3\u51b3\u65b9\u6cd5\uff1a\u7f16\u8bd1\u5668\u548c\u786c\u4ef6\u5171\u540c\u63d0\u4f9b \u4e0d\u53ef\u4f18\u5316\u3001\u4e0d\u53ef\u6253\u65ad \u7684\u6307\u4ee4</p> <p>\u201c\u539f\u5b50\u6307\u4ee4\u201d + compiler barrier</p> <p>\u5b9e\u73b0\u6b63\u786e\u7684\u6c42\u548c\uff1a</p> <pre><code>for (int i = 0; i &lt; N; i++)\n  asm volatile(\"lock incq %0\" : \"+m\"(sum));\n</code></pre> \u793a\u4f8b sum-atomicsum-atomic.c <p>\u4ee3\u7801\u793a\u4f8b\uff1a\u7528\u539f\u5b50\u6307\u4ee4\u5b9e\u73b0\u7684\u6c42\u548c</p> <p>\u53ea\u6709\u8f6f\u4ef6\u548c\u786c\u4ef6 \u201c\u534f\u540c\u5de5\u4f5c\u201d\uff0c\u624d\u80fd\u6b63\u786e\u5b9e\u73b0\u591a\u5904\u7406\u5668\u4e0a\u7684\u5e76\u53d1\uff1a\u6211\u4eec\u4f7f\u7528\u4e86\u5e26\u6709 lock prefix \u7684 x86 \u6307\u4ee4\uff0c\u4fdd\u8bc1\u5355\u6761\u6307\u4ee4 (\u53ef\u4ee5\u6709\u4e00\u6b21 load \u548c\u4e00\u6b21 store) \u4e0d\u88ab\u5176\u4ed6\u5904\u7406\u5668\u6253\u65ad\u3002\u6b64\u5916\uff0c\u6211\u4eec\u8fd8\u989d\u5916\u58f0\u660e\u4e86 clobber memory\uff0c\u4f7f\u5f97\u903b\u8f91\u4e0a\u4f4d\u4e8e\u8fd9\u884c\u8bed\u53e5\u4e4b\u524d\u7684\u6240\u6709\u4ee3\u7801\u8bbf\u95ee\u7684\u5185\u5b58\u90fd\u88ab\u6b63\u786e\u5199\u5165\u3002\u6211\u4eec\u7684 atomic_inc \u5b9e\u73b0\u540c\u65f6\u5305\u542b compiler \u548c memory barrier\u3002</p> <pre><code>#include \"thread.h\"\n\n#define N 100000000\n\nlong sum = 0;\n\nvoid atomic_inc(long *ptr) {\n  asm volatile(\n    \"lock incq %0\"  // Atomic + memory fence\n    : \"+m\"(*ptr)\n    :\n    : \"memory\"\n  );\n}\n\nvoid Tsum() {\n  for (int i = 0; i &lt; N; i++) {\n    atomic_inc(&amp;sum);\n  }\n}\n\nint main() {\n  create(Tsum);\n  create(Tsum);\n  join();\n  printf(\"sum = %ld\\n\", sum);\n}\n</code></pre>"},{"location":"Category/SystemOperation/NJU/6.%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E5%9F%BA%E7%A1%80/#0x04-take-away-messages","title":"0x04 Take-away Messages","text":"<p>\u5e76\u53d1\u7f16\u7a0b \u201c\u5f88\u96be\u201d\uff1a\u60f3\u8981\u5b8c\u5168\u7406\u89e3\u5e76\u53d1\u7a0b\u5e8f\u7684\u884c\u4e3a\uff0c\u662f\u975e\u5e38\u56f0\u96be\u7684\u2014\u2014\u6211\u4eec\u751a\u81f3\u53ef\u4ee5\u5229\u7528\u4e00\u4e2a \u201c\u4e07\u80fd\u201d \u7684\u8c03\u5ea6\u5668\u53bb\u5e2e\u52a9\u6211\u4eec\u6c42\u89e3 NP-\u5b8c\u5168\u95ee\u9898\u3002\u56e0\u6b64\uff0c\u4eba\u7c7b\u5e94\u5bf9\u8fd9\u79cd\u590d\u6742\u6027\u7684\u65b9\u6cd5\u5c31\u662f\u9000\u56de\u5230\u4e0d\u5e76\u53d1\u3002\u901a\u8fc7\u4e92\u65a5\u5b9e\u73b0 stop/resume the world\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u5e76\u53d1\u7a0b\u5e8f\u7684\u6267\u884c\u53d8\u5f97\u66f4\u5bb9\u6613\u7406\u89e3\u2014\u2014\u800c\u53ea\u8981\u7a0b\u5e8f\u4e2d \u201c\u80fd\u5e76\u884c\u201d \u7684\u90e8\u5206\u8db3\u591f\u591a\uff0c\u4e32\u884c\u5316\u4e00\u5c0f\u90e8\u5206\u4e5f\u5e76\u4e0d\u4f1a\u5bf9\u6027\u80fd\u5e26\u6765\u81f4\u547d\u7684\u5f71\u54cd\u3002</p> <ol> <li> <p>\u64cd\u4f5c\u7cfb\u7edf\uff1a\u8bbe\u8ba1\u4e0e\u5b9e\u73b0 (2023 \u6625\u5b63\u5b66\u671f) \u21a9</p> </li> <li> <p>6. \u5e76\u53d1\u63a7\u5236\u57fa\u7840 \u21a9</p> </li> <li> <p>\u5e76\u53d1\u63a7\u5236\uff1a\u57fa\u7840 (Peterson \u7b97\u6cd5\u3001\u6a21\u578b\u68c0\u9a8c\u3001\u539f\u5b50\u64cd\u4f5c) [\u5357\u4eac\u5927\u5b662023\u64cd\u4f5c\u7cfb\u7edf-P6] (\u848b\u708e\u5ca9) \u21a9</p> </li> </ol>"},{"location":"Category/SystemOperation/NJU/7.%20%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%EF%BC%9A%E4%BA%92%E6%96%A5/","title":"7. \u5e76\u53d1\u63a7\u5236\uff1a\u4e92\u65a5","text":""},{"location":"Category/SystemOperation/NJU/7.%20%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%EF%BC%9A%E4%BA%92%E6%96%A5/#_1","title":"\u4e92\u65a5\u95ee\u9898\u7684\u5b9a\u4e49\u548c\u5047\u8bbe","text":"<p>\u5141\u8bb8\u4f7f\u7528\u4f7f\u6211\u4eec\u53ef\u4ee5==\u4e0d\u7ba1\u4e00\u5207\u9ebb\u70e6\u4e8b==\u7684\u539f\u5b50\u6307\u4ee4</p> <pre><code>void atomic_inc(long *ptr);\nint atomic_xchg(int val, int *ptr);\n</code></pre> <p>\u51fd\u6570\u9700\u8981\u5305\u542b\u5982\u4e0b\u529f\u80fd\uff1a</p> <pre><code>- \u5305\u542b\u4e00\u4e2a\u539f\u5b50\u6307\u4ee4\uff08\u6307\u4ee4\u7684\u6267\u884c\u4e0d\u80fd\u88ab\u6253\u65ad\uff09\uff1b\n- \u5305\u542b\u4e00\u4e2a compiler barrier\uff08\u65e0\u8bba\u4f55\u79cd\u4f18\u5316\u90fd\u4e0d\u53ef\u8d8a\u8fc7\u6b64\u51fd\u6570\uff09\uff1b\n- \u5305\u542b\u4e00\u4e2a memory fence\uff1b\n    - \u4fdd\u8bc1\u5904\u7406\u5668\u5728 stop-the-world \u524d\u6240\u6709\u5bf9\u5185\u5b58\u7684 store \u90fd \u201c\u751f\u6548\u201d\uff1b\n    - \u5373\u5bf9 resume-the-world \u4e4b\u540e\u7684 load \u53ef\u89c1\uff1b\n</code></pre> <p>Atomic Exchange \u5b9e\u73b0\uff1a</p> <pre><code>int xchg(int volatile *ptr, int newval) {\n  int result;\n  asm volatile(\n    // \u6307\u4ee4\u81ea\u5e26 memory barrier\n    \"lock xchgl %0, %1\"\n    : \"+m\"(*ptr), \"=a\"(result)\n    : \"1\"(newval)\n    // Compiler barrier\n    : \"memory\"\n  );\n  return result;\n}\n</code></pre>"},{"location":"Category/SystemOperation/NJU/7.%20%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%EF%BC%9A%E4%BA%92%E6%96%A5/#spin-lock","title":"\u81ea\u65cb\u9501 (Spin Lock)","text":""},{"location":"Category/SystemOperation/NJU/7.%20%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%EF%BC%9A%E4%BA%92%E6%96%A5/#1-xchg","title":"1.\u81ea\u65cb\u9501\uff1a\u7528 xchg \u5b9e\u73b0\u4e92\u65a5","text":"<p>\u81ea\u65cb\u9501 (Spin Lock)</p> <pre><code>\u5728\u5395\u6240\u95e8\u53e3\u653e\u4e00\u4e2a\u684c\u5b50 (\u5171\u4eab\u53d8\u91cf): \u521d\u59cb\u65f6\u653e\u7740 \ud83d\udd11;\n\n\u60f3\u4e0a\u5395\u6240\u7684\u540c\u5b66 (\u4e00\u6761 xchg \u6307\u4ee4):\n\n- Stop the world\n- \u770b\u4e00\u773c\u684c\u5b50\u4e0a\u6709\u4ec0\u4e48 (\ud83d\udd11 \u6216 \ud83d\uded1)\n- \u628a \ud83d\uded1 \u653e\u5230\u684c\u4e0a (\u8986\u76d6\u4e4b\u524d\u6709\u7684\u4efb\u4f55\u4e1c\u897f)\n- Resume the world\n- \u671f\u95f4\u770b\u5230 \ud83d\udd11 \u624d\u53ef\u4ee5\u8fdb\u5395\u6240\uff0c\u5426\u5219\u91cd\u590d\n\n\u51fa\u5395\u6240\u7684\u540c\u5b66: \u628a \ud83d\udd11 \u653e\u5230\u684c\u4e0a\n</code></pre>"},{"location":"Category/SystemOperation/NJU/7.%20%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%EF%BC%9A%E4%BA%92%E6%96%A5/#2","title":"2.\u5b9e\u73b0\u4e92\u65a5\uff1a\u81ea\u65cb\u9501","text":"<pre><code>int table = YES;\n\nvoid lock() {\nretry:\n  int got = xchg(&amp;table, NOPE);\n  if (got == NOPE)\n    goto retry;\n  assert(got == YES);\n}\n\nvoid unlock() {\n  xchg(&amp;table, YES);  // \u4e3a\u4ec0\u4e48\u4e0d\u662f table = YES; ?\n}\n</code></pre> <p>\u5728 xchg \u7684\u5047\u8bbe\u4e0b\u7b80\u5316\u5b9e\u73b0:</p> <pre><code>- \u5305\u542b\u4e00\u4e2a\u539f\u5b50\u6307\u4ee4\n- \u5305\u542b\u4e00\u4e2a compiler barrier\n- \u5305\u542b\u4e00\u4e2a memory fence\n\n``` c\nint locked = 0;\n\nvoid lock() {\n    while (xchg(&amp;locked, 1));\n}\n\nvoid unlock() {\n    xchg(&amp;locked, 0);\n}\n```\n</code></pre> spinlock model checkerspinlock.py <p>\u4f7f\u7528 model checker \u53ef\u4ee5\u770b\u5230\u6240\u6709\u7684\u8fd0\u884c\u60c5\u51b5\uff1a</p> <pre><code>python3 mosaic.py -c spinlock.py | grep stdout | sort | uniq -c\n\n  18       \"stdout\": \"\",\n   5       \"stdout\": \"(\",\n  20       \"stdout\": \"()\",\n   5       \"stdout\": \"()(\",\n  15       \"stdout\": \"()()\",\n   5       \"stdout\": \"()()[\",\n  14       \"stdout\": \"()()[]\",\n   5       \"stdout\": \"()()[][\",\n   9       \"stdout\": \"()()[][]\",\n   ......\n</code></pre> <pre><code>def Tworker(enter, exit):\n  for _ in range(2):\n    while True:\n      seen = heap.table\n      heap.table = '\u274c'\n      sys_sched()\n      if seen == '\u2705':\n        break\n    sys_sched()\n    sys_write(enter)\n    sys_sched()\n    sys_write(exit)\n    sys_sched()\n    heap.table = '\u2705'\n    sys_sched()\n\ndef main():\n  heap.table = '\u2705'\n  sys_spawn(Tworker, '(', ')')\n  sys_spawn(Tworker, '[', ']')\n</code></pre>"},{"location":"Category/SystemOperation/NJU/7.%20%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%EF%BC%9A%E4%BA%92%E6%96%A5/#3-sum","title":"3. sum\u6c42\u548c\u4f7f\u7528\u81ea\u65cb\u9501","text":"sum \u6c42\u548csum-spinlock.c <p>\u4ee3\u7801\u793a\u4f8b\uff1a\u7528\u81ea\u65cb\u9501\u5b9e\u73b0\u4e92\u65a5</p> <p>\u6211\u4eec\u5c06 sum \u53d8\u91cf\u7684\u8bbf\u95ee\u7528 lock/unlock \u5305\u56f4\u8d77\u6765\uff0c\u4ee5\u5b9e\u73b0\u4e92\u65a5\u3002\u6ce8\u610f\u5230 sum \u662f\u4e00\u4e2a\u666e\u901a\u7684\u53d8\u91cf\uff0c\u80fd\u591f\u4ee5\u5927\u5bb6\u719f\u6089\u7684\u65b9\u5f0f\u88ab\u7f16\u8bd1\u4f18\u5316 (\u4f8b\u5982 10 \u6b21 sum++ \u53ef\u4ee5\u88ab\u4f18\u5316\u6210 sum += 10)\u3002lock/unlock \u4e2d\u7684 compiler barrier \u548c memory fence \u4fdd\u8bc1\u4e86\u7ebf\u7a0b\u95f4\u7684\u6570\u636e\u53ef\u4ee5\u6b63\u786e\u8bfb\u53d6\u3002</p> <pre><code>#include \"thread.h\"\n\n#define N 100000000\n#define M 10\n\nlong sum = 0;\n\nint xchg(int volatile *ptr, int newval) {\n  int result;\n  asm volatile(\n    \"lock xchgl %0, %1\"\n    : \"+m\"(*ptr), \"=a\"(result)\n    : \"1\"(newval)\n    : \"memory\"\n  );\n  return result;\n}\n\nint locked = 0;\n\nvoid lock() {\n  while (xchg(&amp;locked, 1)) ;\n}\n\nvoid unlock() {\n  xchg(&amp;locked, 0);\n}\n\nvoid Tsum() {\n  long nround = N / M;\n  for (int i = 0; i &lt; nround; i++) {\n    lock();\n    for (int j = 0; j &lt; M; j++) {\n      sum++;  // Non-atomic; can optimize\n    }\n    unlock();\n  }\n}\n\nint main() {\n  assert(N % M == 0);\n  create(Tsum);\n  create(Tsum);\n  join();\n  printf(\"sum = %ld\\n\", sum);\n}\n</code></pre>"},{"location":"Category/SystemOperation/NJU/7.%20%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%EF%BC%9A%E4%BA%92%E6%96%A5/#4-xchg","title":"4.\u5728\u81ea\u65cb\u9501\u4e2d\u4ee3\u66ff xchg","text":"<p>\u5728\u81ea\u65cb\u9501\u7684\u5b9e\u73b0\u4e2d\uff0c<code>xchg</code> \u5b8c\u5168\u53ef\u4ee5\u7528 <code>cmpxchg</code> \u4ee3\u66ff:</p> <pre><code>// cmpxchg(old='\ud83d\udd11', new='\ud83d\uded1', *ptr)\nint tmp = *ptr;\nif (tmp == '\ud83d\udd11') {\n  *ptr = '\ud83d\uded1'\n  assert(tmp == '\ud83d\udd11');\n} else {\n  assert(tmp == '\ud83d\uded1');\n}\nreturn tmp;\n\n// \u628a\u4e0a\u8ff0\u4f2a\u4ee3\u7801\u4e00\u4e9b\u53c2\u6570\u540d\u79f0\u6539\u53d8\u4e00\u4e0b,\u6765\u66f4\u7cbe\u786e\u8868\u793a\u5176\u610f\u601d\n// ptr --&gt; \u9501\u5f53\u524d\u72b6\u6001\n// old --&gt; \u7533\u8bf7\u8005\u671f\u671b\u72b6\u6001\n// new --&gt; \u7533\u8bf7\u8005\u5360\u7528\u9501\u65f6\u7ed9\u9501\u8bbe\u7f6e\u7684\u72b6\u6001\n</code></pre> <p>\u5149\u770b\u4ee3\u7801\u6211\u4eec\u5f88\u96be\u7406\u89e3 <code>cmpxchg</code>\uff0c\u770b\u4e00\u4e2a\u6817\u5b50\u6765\u611f\u77e5\u5b83\u7684\u4f5c\u7528\uff1a</p> <p>\u4e0b\u9762\u4ee5\u706b\u8f66\u4e0a\u4e24\u4e2a\u4e92\u4e0d\u76f8\u8bc6\u7684\u4e58\u5ba2A,B\u6765\u8bbf\u95ee\u540c\u4e00\u4e2a\u536b\u751f\u95f4\u7684\u573a\u666f\u6765\u7406\u89e3 <code>cmpxchg</code> \u539f\u7406\uff0c \u5176\u4e2d\u4e58\u5ba2A\u5148\u6765\u5230\u536b\u751f\u95f4\uff0c\u5728\u6b64\u4e4b\u524d\u536b\u751f\u95f4\u6ca1\u4eba\u3002\u536b\u751f\u95f4\u5728\u6ca1\u4eba\u7684\u65f6\u5019\uff0c\u4f1a\u7528 \ud83d\udd11 \u6302\u5728\u95e8\u53e3\uff0c \u53ef\u4ee5\u5f00\u95e8\uff0c\u6709\u4eba\u7684\u65f6\u5019\u4f1a\u7528 \ud83d\uded1 \u6302\u5728\u95e8\u53e3\uff0c\u65e0\u6cd5\u5f00\u95e8\uff0c\u4f2a\u4ee3\u7801\u5982\u4e0b\uff1a</p> <pre><code>// \u706b\u8f66\u67d0\u8f66\u53a2\u516c\u5171\u536b\u751f\u95f4\u7684\u9501 lock_state_cur\nlock_state_cur == \ud83d\udd11;// \u8868\u793a\u6b64\u65f6\u536b\u751f\u95f4\u6ca1\u4eba\nlock_state_cur == \ud83d\uded1;// \u8868\u793a\u6b64\u65f6\u536b\u751f\u95f4\u6709\u4eba\n\n\n//\u6b64\u65f6\u8fc7\u6765\u4e00\u4e2a\u4e58\u5ba2A\u60f3\u8981\u4f7f\u7528\u536b\u751f\u95f4\nlock_state_cur == \ud83d\udd11;// \u8868\u793a\u6b64\u65f6\u536b\u751f\u95f4\u6ca1\u4eba\nlock_state_exp == \ud83d\udd11;// \u4e58\u5ba2A\u5e0c\u671b\u536b\u751f\u95f4\u6ca1\u4eba\nlock_state_use == \ud83d\uded1;// \u4e58\u5ba2A\u6b63\u5728\u4f7f\u7528\u536b\u751f\u95f4\u65f6\u5e0c\u671b\u5916\u9762\u4eba\u77e5\u9053\u536b\u751f\u95f4\u6b64\u65f6\u6709\u4eba\n\n//cmpxchg \u4f1a\u5148\u4e0a\u9501,\u7136\u540e\u8fd4\u56de \ud83d\udd11,\u4ee5\u544a\u77e5\u4e58\u5ba2A\u53ef\u4ee5\u4f7f\u7528\u536b\u751f\u95f4.\ncmpxchg(cur, exp, use) returns \ud83d\udd11;\n</code></pre> <p>\u6b64\u65f6\u4e58\u5ba2B\u4e5f\u6765\u4e86\uff0c\u53d1\u73b0\u536b\u751f\u95f4\u6709\u4eba\u4e86\uff0c\u5373\u536b\u751f\u95f4\u663e\u793a\u4e0a\u9501\u4e86(lock_state_cur == \ud83d\uded1)\uff0c \u90a3\u4e48\u4e58\u5ba2B\u53ea\u80fd\u5728\u536b\u751f\u95f4\u5916\u7b49\u5f85\uff0c\u4f2a\u4ee3\u7801\u5982\u4e0b\uff1a</p> <pre><code>lock_state_cur == \ud83d\uded1;// \u6b64\u65f6\u536b\u751f\u95f4\u6709\u4eba,\u4e58\u5ba2A\u5728\u91cc\u9762\nlock_state_exp == \ud83d\udd11;// \u4e58\u5ba2B\u5e0c\u671b\u536b\u751f\u95f4\u6ca1\u4eba\nlock_state_use == \ud83d\uded1;// \u4e58\u5ba2B\u6b63\u5728\u4f7f\u7528\u536b\u751f\u95f4\u65f6\u5e0c\u671b\u5916\u9762\u4eba\u77e5\u9053\u536b\u751f\u95f4\u6b64\u65f6\u6709\u4eba\n\n// cmpxchg\u53d1\u73b0\u9501\u5f53\u524d\u72b6\u6001\u4e3a\u4e0a\u9501\u72b6\u6001,\u5219\u4f1a\u76f4\u63a5\u8fd4\u56de \ud83d\uded1,\u4ee5\u544a\u77e5\u4e58\u5ba2B\u6b64\u65f6\u536b\u751f\u95f4\u6709\u4eba.\ncmpxchg(cur, exp, use) returns \ud83d\uded1;// \ud83d\uded1 \u8868\u660e\u536b\u751f\u95f4\u6709\u4eba,\u4e58\u5ba2B\u53ea\u80fd\u7b49\u5f85\n</code></pre> <p>\u4e58\u5ba2B\u7b49\u5f85\u7684\u64cd\u4f5c\u662f\uff0c\u65f6\u4e0d\u65f6\u779f\u4e00\u773c\u536b\u751f\u95f4\uff0c\u5982\u679c\u536b\u751f\u95f4\u5f00\u9501\u4e86\uff0c\u90a3\u4e48\u4e58\u5ba2B\u5c31\u80fd\u8fdb\u5165\u536b\u751f\u95f4\uff0c\u5176\u4ed6\u4e58\u5ba2\u4ee5\u6b64\u7c7b\u63a8\u3002</p> cmpxchg \u7684\u5b9e\u73b0<pre><code>#include &lt;stdio.h&gt;\n#include &lt;assert.h&gt;\n\nint cmpxchg(int old, int new, int volatile *ptr) {\n  asm volatile(\n    \"lock cmpxchgl %[new], %[mem]\"\n      : \"+a\"(old), [mem] \"+m\"(*ptr)\n      : [new] \"S\"(new)\n      : \"memory\"\n  );\n  return old;\n}\n\nint cmpxchg_ref(int old, int new, int volatile *ptr) {\n  int tmp = *ptr;  // Load\n  if (tmp == old) {\n    *ptr = new;  // Store (conditionally)\n  }\n  return tmp;\n}\n\nvoid run_test(int x, int old, int new) {\n  int val1 = x;\n  int ret1 = cmpxchg(old, new, &amp;val1);\n\n  int val2 = x;\n  int ret2 = cmpxchg_ref(old, new, &amp;val2);\n\n  assert(val1 == val2 &amp;&amp; ret1 == ret2);\n  printf(\"x = %d -&gt; (cmpxchg %d -&gt; %d) -&gt; x = %d\\n\", x, old, new, val1);\n}\n\nint main() {\n  for (int x = 0; x &lt;= 2; x++)\n    for (int old = 0; old &lt;= 2; old++)\n      for (int new = 0; new &lt;= 2; new++)\n        run_test(x, old, new);\n}\n</code></pre>"},{"location":"Category/SystemOperation/NJU/7.%20%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%EF%BC%9A%E4%BA%92%E6%96%A5/#_2","title":"\u81ea\u65cb\u9501\u7684\u7f3a\u9677","text":"<p>\u6027\u80fd\u95ee\u9898 (1)\uff1a</p> <ul> <li>\u9664\u4e86\u8fdb\u5165\u4e34\u754c\u533a\u7684\u7ebf\u7a0b\uff0c\u5176\u4ed6\u5904\u7406\u5668\u4e0a\u7684\u7ebf\u7a0b\u90fd\u5728\u7a7a\u8f6c\uff1b</li> <li>\u4e89\u62a2\u9501\u7684\u5904\u7406\u5668\u8d8a\u591a\uff0c\u5229\u7528\u7387\u8d8a\u4f4e\uff1b</li> </ul> <p>\u6027\u80fd\u95ee\u9898 (2)\uff1a</p> <ul> <li>\u6301\u6709\u81ea\u65cb\u9501\u7684\u7ebf\u7a0b\u53ef\u80fd\u88ab\u64cd\u4f5c\u7cfb\u7edf\u5207\u6362\u51fa\u53bb\uff1b<ul> <li>\u64cd\u4f5c\u7cfb\u7edf\u4e0d \u201c\u611f\u77e5\u201d \u7ebf\u7a0b\u5728\u505a\u4ec0\u4e48</li> </ul> </li> <li>\u5b9e\u73b0 100% \u7684\u8d44\u6e90\u6d6a\u8d39\uff08\u4e00\u6838\u6709\u96be\u516b\u6838\u56f4\u89c2\uff09\uff1b</li> </ul>"},{"location":"Category/SystemOperation/NJU/7.%20%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%EF%BC%9A%E4%BA%92%E6%96%A5/#1scalability","title":"1.Scalability: \u6027\u80fd\u7684\u65b0\u7ef4\u5ea6","text":"<p>Warning</p> <p>\u540c\u4e00\u4efd\u8ba1\u7b97\u4efb\u52a1\uff0c\u65f6\u95f4 (CPU cycles) \u548c\u7a7a\u95f4 (mapped memory) \u4f1a\u968f\u5904\u7406\u5668\u6570\u91cf\u7684\u589e\u957f\u800c\u53d8\u5316\u3002</p> <p></p> <p>\u7528\u81ea\u65cb\u9501\u5b9e\u73b0 sum++ \u7684\u6027\u80fd\u95ee\u9898\uff0c\u4e25\u8c28\u7684\u7edf\u8ba1\u5f88\u96be\uff1a</p> <ul> <li>CPU \u52a8\u6001\u529f\u8017</li> <li>\u7cfb\u7edf\u4e2d\u7684\u5176\u4ed6\u8fdb\u7a0b</li> <li>\u8d85\u7ebf\u7a0b</li> <li>NUMA</li> <li>...</li> <li>Benchmarking crimes</li> </ul>"},{"location":"Category/SystemOperation/NJU/7.%20%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%EF%BC%9A%E4%BA%92%E6%96%A5/#2_1","title":"2.\u81ea\u65cb\u9501\u7684\u4f7f\u7528\u573a\u666f","text":"<ol> <li>\u4e34\u754c\u533a\u51e0\u4e4e\u4e0d \u201c\u62e5\u5835\u201d</li> <li>\u6301\u6709\u81ea\u65cb\u9501\u65f6\u7981\u6b62\u6267\u884c\u6d41\u5207\u6362</li> </ol> <p>\u4f7f\u7528\u573a\u666f\uff1a\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u7684\u5e76\u53d1\u6570\u636e\u7ed3\u6784 (\u77ed\u4e34\u754c\u533a)</p> <ul> <li>\u64cd\u4f5c\u7cfb\u7edf\u53ef\u4ee5\u5173\u95ed\u4e2d\u65ad\u548c\u62a2\u5360<ul> <li>\u4fdd\u8bc1\u9501\u7684\u6301\u6709\u8005\u5728\u5f88\u77ed\u7684\u65f6\u95f4\u5185\u53ef\u4ee5\u91ca\u653e\u9501</li> </ul> </li> <li>(\u5982\u679c\u662f\u865a\u62df\u673a\u5462...\ud83d\ude02)<ul> <li>PAUSE \u6307\u4ee4\u4f1a\u89e6\u53d1 VM Exit</li> </ul> </li> <li>\u4f46\u4f9d\u65e7\u5f88\u96be\u505a\u597d<ul> <li>An analysis of Linux scalability to many cores (OSDI'10)</li> </ul> </li> </ul>"},{"location":"Category/SystemOperation/NJU/7.%20%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%EF%BC%9A%E4%BA%92%E6%96%A5/#3","title":"3.\u5b9e\u73b0\u7ebf\u7a0b + \u957f\u4e34\u754c\u533a\u7684\u4e92\u65a5","text":"<p>\u4f46\u6709\u4e00\u79cd\u7279\u6b8a\u7684\u6307\u4ee4\uff1a<code>syscall</code></p> <ul> <li>\u628a\u9501\u7684\u5b9e\u73b0\u653e\u5230\u64cd\u4f5c\u7cfb\u7edf\u91cc\u5c31\u597d\u5566<ul> <li>syscall(SYSCALL_lock, &amp;lk);</li> <li>\u8bd5\u56fe\u83b7\u5f97 lk\uff0c\u4f46\u5982\u679c\u5931\u8d25\uff0c\u5c31\u5207\u6362\u5230\u5176\u4ed6\u7ebf\u7a0b</li> <li>syscall(SYSCALL_unlock, &amp;lk);</li> <li>\u91ca\u653e lk\uff0c\u5982\u679c\u6709\u7b49\u5f85\u9501\u7684\u7ebf\u7a0b\u5c31\u5524\u9192</li> </ul> </li> </ul>"},{"location":"Category/SystemOperation/NJU/7.%20%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%EF%BC%9A%E4%BA%92%E6%96%A5/#4","title":"4.\u5173\u4e8e\u4e92\u65a5\u7684\u4e00\u4e9b\u5206\u6790","text":"<code>\u81ea\u65cb\u9501 (\u7ebf\u7a0b\u76f4\u63a5\u5171\u4eab locked)</code> <ul> <li>\u66f4\u5feb\u7684 fast path<ul> <li>xchg \u6210\u529f \u2192 \u7acb\u5373\u8fdb\u5165\u4e34\u754c\u533a\uff0c\u5f00\u9500\u5f88\u5c0f</li> </ul> </li> <li>\u66f4\u6162\u7684 slow path  <ul> <li>xchg \u5931\u8d25 \u2192 \u6d6a\u8d39 CPU \u81ea\u65cb\u7b49\u5f85</li> </ul> </li> </ul> <code>\u4e92\u65a5\u9501 (\u901a\u8fc7\u7cfb\u7edf\u8c03\u7528\u8bbf\u95ee locked)</code> <ul> <li>\u66f4\u7ecf\u6d4e\u7684 slow path<ul> <li>\u4e0a\u9501\u5931\u8d25\u7ebf\u7a0b\u4e0d\u518d\u5360\u7528 CPU</li> </ul> </li> <li>\u66f4\u6162\u7684 fast path<ul> <li>\u5373\u4fbf\u4e0a\u9501\u6210\u529f\u4e5f\u9700\u8981\u8fdb\u51fa\u5185\u6838 (syscall)</li> </ul> </li> </ul>"},{"location":"Category/SystemOperation/NJU/7.%20%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%EF%BC%9A%E4%BA%92%E6%96%A5/#5-scalability","title":"5.\u81ea\u65cb\u9501\u6c42\u548c\u7684 Scalability","text":"\u793a\u4f8b\uff1asum-scalabilitysum-scalability.cthread-sync.h <p>\u4ee3\u7801\u793a\u4f8b\uff1a\u81ea\u65cb\u9501\u6c42\u548c\u7684 Scalability</p> <p>\u5982\u679c\u628a\u591a sum++ \u5747\u5300\u5730\u5206\u5230 n \u4e2a\u7ebf\u7a0b\uff0c\u5c06\u4f1a\u5f97\u5230\u4ec0\u4e48\u6837\u7684\u7ed3\u679c\uff1f</p> <p>\u4e34\u754c\u533a\u7684\u4ee3\u7801\u4e0d\u80fd\u5e76\u884c\u2014\u2014\u56e0\u6b64\u65e0\u8bba\u5f00\u542f\u591a\u5c11\u4e2a\u7ebf\u7a0b\uff0c\u6267\u884c sum++ \u6307\u4ee4\u7684\u6570\u91cf\u662f\u5b8c\u5168\u76f8\u540c\u7684\u3002\u7136\u800c\uff0c\u56e0\u4e3a\u591a\u4e2a\u5904\u7406\u5668\u4e4b\u95f4\u4e89\u62a2\u9501\u548c sum \u53d8\u91cf\uff0c\u5c06\u4f1a\u5f15\u8d77\u7f13\u5b58\u4e00\u81f4\u6027\u534f\u8bae\u7684\u989d\u5916\u5f00\u9500\u3002\u968f\u7740\u7ebf\u7a0b\u6570\u91cf\u7684\u589e\u957f\uff0c\u7a0b\u5e8f\u7684\u6548\u7387\u9010\u6e10\u964d\u4f4e\u3002\u4e3a\u4e86\u89c2\u5bdf\u5230\u8fd9\u4e00\u73b0\u8c61\uff0c\u4f60\u9700\u8981\u5728\u591a\u5904\u7406\u5668\u7cfb\u7edf\u4e0a\u8fd0\u884c\u8fd9\u4e2a\u7a0b\u5e8f\u3002</p> <pre><code>#include \"thread.h\"\n#include \"thread-sync.h\"\n\n#define N 10000000\nspinlock_t lock = SPIN_INIT();\n\nlong n, sum = 0;\n\nvoid Tsum() {\n  for (int i = 0; i &lt; n; i++) {\n    spin_lock(&amp;lock);\n    sum++;\n    spin_unlock(&amp;lock);\n  }\n}\n\nint main(int argc, char *argv[]) {\n  assert(argc == 2);\n  int nthread = atoi(argv[1]);\n  n = N / nthread;\n  for (int i = 0; i &lt; nthread; i++) {\n    create(Tsum);\n  }\n  join();\n  assert(sum == n * nthread);\n}\n</code></pre> <pre><code>#include &lt;semaphore.h&gt;\n\n// Spinlock\ntypedef int spinlock_t;\n#define SPIN_INIT() 0\n\nstatic inline int atomic_xchg(volatile int *addr, int newval) {\n  int result;\n  asm volatile (\"lock xchg %0, %1\":\n    \"+m\"(*addr), \"=a\"(result) : \"1\"(newval) : \"memory\");\n  return result;\n}\n\nvoid spin_lock(spinlock_t *lk) {\n  while (1) {\n    intptr_t value = atomic_xchg(lk, 1);\n    if (value == 0) {\n      break;\n    }\n  }\n}\nvoid spin_unlock(spinlock_t *lk) {\n  atomic_xchg(lk, 0);\n}\n\n// Mutex\ntypedef pthread_mutex_t mutex_t;\n#define MUTEX_INIT() PTHREAD_MUTEX_INITIALIZER\nvoid mutex_lock(mutex_t *lk)   { pthread_mutex_lock(lk); }\nvoid mutex_unlock(mutex_t *lk) { pthread_mutex_unlock(lk); }\n\n// Conditional Variable\ntypedef pthread_cond_t cond_t;\n#define COND_INIT() PTHREAD_COND_INITIALIZER\n#define cond_wait pthread_cond_wait\n#define cond_broadcast pthread_cond_broadcast\n#define cond_signal pthread_cond_signal\n\n// Semaphore\n#define P sem_wait\n#define V sem_post\n#define SEM_INIT(sem, val) sem_init(sem, 0, val)\n</code></pre>"},{"location":"Category/SystemOperation/NJU/7.%20%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%EF%BC%9A%E4%BA%92%E6%96%A5/#6","title":"6.\u4f7f\u7528\u4e92\u65a5\u9501\u4fdd\u62a4\u4e34\u754c\u533a","text":"\u793a\u4f8b\uff1asum-mutexsum-mutex.cinit.gdb <p>\u4ee3\u7801\u793a\u4f8b\uff1a\u4f7f\u7528\u4e92\u65a5\u9501\u4fdd\u62a4\u4e34\u754c\u533a</p> <p>\u64cd\u4f5c\u7cfb\u7edf\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u4e92\u65a5\u9501\uff0c\u4ee5\u5e94\u5bf9\u591a\u5904\u7406\u5668\u81ea\u65cb\u5e26\u6765\u7684 CPU \u6d6a\u8d39\u3002\u4e92\u65a5\u9501\u4f1a\u5148\u8bd5\u7740\u81ea\u65cb\uff1b\u5982\u679c\u6ca1\u80fd\u83b7\u5f97\u9501\uff0c\u5219\u4f1a\u8fdb\u5165 Slow Path\uff0c\u7531\u64cd\u4f5c\u7cfb\u7edf\u63a5\u7ba1\u9501\u7684\u5b9e\u73b0\u3002\u7531\u4e8e\u65e0\u6cd5\u9884\u77e5\u591a\u4e45\u540e\u9501\u624d\u4f1a\u88ab\u91ca\u653e\uff0c\u64cd\u4f5c\u7cfb\u7edf\u4f1a\u5c06\u4e0a\u9501\u7684\u7ebf\u7a0b\u6682\u505c\u5e76\u4e0d\u518d\u8c03\u5ea6\u5b83\uff0c\u76f4\u5230\u6301\u6709\u9501\u7684\u7ebf\u7a0b\u91ca\u653e\u9501\u4e3a\u6b62\u3002</p> <p>\u4ece\u4f7f\u7528\u7684\u89d2\u5ea6\uff0c\u4e92\u65a5\u9501\u7684\u884c\u4e3a\u4e0e\u81ea\u65cb\u9501\u5b8c\u5168\u76f8\u540c (\u9664\u4e86\u66f4\u5c11\u7684 CPU \u6d6a\u8d39)\u3002</p> <pre><code>#include \"thread.h\"\n#include \"thread-sync.h\"\n\nmutex_t lock = MUTEX_INIT();\n\nlong sum = 0;\n\nvoid Tsum() {\n  mutex_lock(&amp;lock);\n  sum++;\n  mutex_unlock(&amp;lock);\n}\n\nint main() {\n  create(Tsum);\n  create(Tsum);\n  join();\n  printf(\"sum = %ld\\n\", sum);\n}\n</code></pre> <pre><code>file a.out\nstart\nset scheduler-locking on\nb Tsum\nc\ninfo threads\n</code></pre>"},{"location":"Category/SystemOperation/NJU/7.%20%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%EF%BC%9A%E4%BA%92%E6%96%A5/#take-away-messages","title":"Take-away Messages","text":"<p>\u4e3a\u4e86\u5b9e\u73b0\u73b0\u4ee3\u591a\u5904\u7406\u5668\u7cfb\u7edf\u4e0a\u7684\u4e92\u65a5\uff0c\u6211\u4eec\u9996\u5148\u9700\u8981\u7406\u89e3 \u201c\u539f\u5b50\u64cd\u4f5c\u201d (\u4f8b\u5982 atomic_xchg) \u7684\u5047\u8bbe\uff1a</p> <ol> <li>\u64cd\u4f5c\u672c\u8eab\u662f\u539f\u5b50\u7684\u3001\u770b\u8d77\u6765\u65e0\u6cd5\u88ab\u6253\u65ad\u7684\uff0c\u5373\u5b83\u771f\u7684\u662f\u4e00\u4e2a \u201c\u539f\u5b50\u64cd\u4f5c\u201d\uff1b</li> <li>\u64cd\u4f5c\u81ea\u5e26\u4e00\u4e2a compiler barrier\uff0c\u9632\u6b62\u4f18\u5316\u8de8\u8fc7\u51fd\u6570\u8c03\u7528\u3002\u8fd9\u4e00\u70b9\u5f88\u91cd\u8981\u2014\u2014\u4f8b\u5982\u6211\u4eec\u4eca\u5929\u7684\u7f16\u8bd1\u5668\u652f\u6301 Link-time Optimization (LTO)\uff0c\u5982\u679c\u7f3a\u5c11 compiler barrier\uff0c\u7f16\u8bd1\u4f18\u5316\u53ef\u4ee5\u7a7f\u8fc7 volatile \u6807\u8bb0\u7684\u6c47\u7f16\u6307\u4ee4\uff1b</li> <li>\u64cd\u4f5c\u81ea\u5e26\u4e00\u4e2a memory barrier\uff0c\u4fdd\u8bc1\u64cd\u4f5c\u6267\u884c\u524d\u6307\u4ee4\u7684\u5199\u5165\uff0c\u80fd\u5bf9\u5176\u4ed6\u5904\u7406\u5668\u4e4b\u540e\u7684 load \u53ef\u89c1\u3002</li> </ol> <p>\u5728\u6b64\u5047\u8bbe\u7684\u57fa\u7840\u4e0a\uff0c\u539f\u5b50\u64cd\u4f5c\u5c31\u6210\u4e3a\u4e86\u6211\u4eec\u7b80\u5316\u7a0b\u5e8f\u6267\u884c\u7684\u57fa\u7840\u673a\u5236\u3002\u901a\u8fc7\u81ea\u65cb (spin)\uff0c\u53ef\u4ee5\u5f88\u76f4\u89c2\u5730\u5b9e\u73b0 \u201c\u8f6e\u8be2\u201d \u5f0f\u7684\u4e92\u65a5\u3002\u800c\u4e3a\u4e86\u8282\u7ea6\u5171\u4eab\u5185\u5b58\u7ebf\u7a0b\u5728\u81ea\u65cb\u4e0a\u6d6a\u8d39\u7684\u5904\u7406\u5668\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u901a\u8fc7\u7cfb\u7edf\u8c03\u7528\u8bf7\u6c42\u64cd\u4f5c\u7cfb\u7edf\u6765\u5e2e\u52a9\u73b0\u6210\u5b8c\u6210\u4e92\u65a5\u3002</p> <ol> <li> <p>\u64cd\u4f5c\u7cfb\u7edf\uff1a\u8bbe\u8ba1\u4e0e\u5b9e\u73b0 (2023 \u6625\u5b63\u5b66\u671f) \u21a9</p> </li> <li> <p>7. \u5e76\u53d1\u63a7\u5236\uff1a\u4e92\u65a5 \u21a9</p> </li> <li> <p>\u5e76\u53d1\u63a7\u5236\uff1a\u4e92\u65a5 (\u95ee\u9898\u5b9a\u4e49\u4e0e\u5047\u8bbe\uff1b\u81ea\u65cb\u9501\uff1b\u4e92\u65a5\u9501) [\u5357\u4eac\u5927\u5b662023\u64cd\u4f5c\u7cfb\u7edf-P7] (\u848b\u708e\u5ca9) \u21a9</p> </li> <li> <p>cmpxchg\u539f\u7406 \u21a9</p> </li> </ol>"},{"location":"Category/SystemOperation/NJU/9.%20%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%EF%BC%9A%E5%90%8C%E6%AD%A5%20%281%29/","title":"9. \u5e76\u53d1\u63a7\u5236\uff1a\u540c\u6b65 (1)","text":""},{"location":"Category/SystemOperation/NJU/9.%20%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%EF%BC%9A%E5%90%8C%E6%AD%A5%20%281%29/#_1","title":"\u540c\u6b65\u95ee\u9898\u7684\u5b9a\u4e49","text":"<p>\u540c\u6b65(synchronization)</p> <pre><code>\u4e24\u4e2a\u6216\u8005\u4e24\u4e2a\u4ee5\u4e0a\u968f\u65f6\u95f4\u53d8\u5316\u7684\u91cf\u5728\u53d8\u5316\u7684\u8fc7\u7a0b\u4e2d\u4fdd\u6301\u4e00\u5b9a\u7684\u76f8\u5bf9\u5173\u7cfb\n</code></pre> <p>\u5e76\u53d1\u7a0b\u5e8f\u4e2d\u7684\u6b65\u8c03\u5f88\u96be\u4fdd\u6301\u5b8c\u5168\u4e00\u81f4\uff1a</p> <ul> <li>\u7ebf\u7a0b\u540c\u6b65\uff1a\u5728\u67d0\u4e2a\u65f6\u95f4\u70b9\u5171\u540c\u8fbe\u5230\u76f8\u4e92\u5df2\u77e5\u7684\u72b6\u6001\u3002</li> </ul>"},{"location":"Category/SystemOperation/NJU/9.%20%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%EF%BC%9A%E5%90%8C%E6%AD%A5%20%281%29/#-","title":"\u751f\u4ea7\u8005-\u6d88\u8d39\u8005\u95ee\u9898","text":"<p>\u751f\u4ea7\u8005-\u6d88\u8d39\u8005</p> <pre><code>99% \u7684\u5b9e\u9645\u5e76\u53d1\u95ee\u9898\u90fd\u53ef\u4ee5\u7528\u751f\u4ea7\u8005-\u6d88\u8d39\u8005\u89e3\u51b3\uff01\n</code></pre> <pre><code>void Tproduce() { while(1) printf(\"(\"); }\nvoid Tconsume() { while(1) printf(\")\"); }\n</code></pre> <p>\u5728 printf \u524d\u540e\u589e\u52a0\u4ee3\u7801\uff0c\u4f7f\u5f97\u6253\u5370\u7684\u62ec\u53f7\u5e8f\u5217\u6ee1\u8db3\uff1a</p> <ul> <li>\u4e00\u5b9a\u662f\u67d0\u4e2a\u5408\u6cd5\u62ec\u53f7\u5e8f\u5217\u7684\u524d\u7f00</li> <li>\u62ec\u53f7\u5d4c\u5957\u7684\u6df1\u5ea6\u4e0d\u8d85\u8fc7 n<ul> <li>n = 3: ((())())((( \u5408\u6cd5</li> <li>n = 3: (((()))), (())) \u4e0d\u5408\u6cd5 </li> </ul> </li> </ul> <p>\u751f\u4ea7\u8005-\u6d88\u8d39\u8005\u95ee\u9898\u4e2d\u7684\u540c\u6b65\uff1a</p> <ul> <li>Tproduce: \u7b49\u5230\u6709\u7a7a\u4f4d\u7684\u65f6\u5019\u624d\u80fd\u6253\u5370\u5de6\u62ec\u53f7\uff1b</li> <li>Tconsume: \u7b49\u5230\u6709\u591a\u4f59\u7684\u5de6\u62ec\u53f7\u7684\u65f6\u5019\u624d\u80fd\u6253\u5370\u6709\u62ec\u53f7\uff1b</li> </ul>"},{"location":"Category/SystemOperation/NJU/9.%20%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%EF%BC%9A%E5%90%8C%E6%AD%A5%20%281%29/#1-","title":"1.\u9519\u8bef\u7684\u751f\u4ea7\u8005-\u6d88\u8d39\u8005\u5b9e\u73b0","text":"\u793a\u4f8b\uff1apc-cvpc-cv.c\u9a8c\u8bc1\uff1apc-check.pythread-sync.hmodel-checker <p>\u4f7f\u7528\u6761\u4ef6\u53d8\u91cf\u65f6\uff0c\u6211\u4eec\u8981\u6ce8\u610f\u5524\u9192\u7684\u7ebf\u7a0b\u662f\u4e0d\u53d7\u63a7\u5236\u7684\u3002\u56e0\u6b64\u6709\u8da3\u7684\u73b0\u8c61\u53ef\u80fd\u53d1\u751f (\u5047\u8bbe n = 1\uff0c\u4f46\u6709\u591a\u4e2a\u751f\u4ea7\u8005\u548c\u6d88\u8d39\u8005)\uff1a</p> <ul> <li>\u4e00\u4e2a Tconsume \u548c\u4e00\u4e2a Tproduce \u540c\u65f6\u5904\u4e8e\u7b49\u5f85\u72b6\u6001</li> <li>\u6b64\u65f6\u6253\u5370\u7684\u62ec\u53f7\u5e8f\u5217\u4e3a ...(\uff0c\u6b64\u65f6\u53ef\u4ee5\u6253\u5370\u4e00\u4e2a\u53f3\u62ec\u53f7</li> <li>\u6b64\u65f6\u53e6\u4e00\u4e2a Tconsume \u5f00\u59cb\u6267\u884c\uff0c\u6253\u5370\u4e00\u4e2a\u53f3\u62ec\u53f7\uff0c\u5e76\u6267\u884c signal \u5524\u9192\u4e00\u4e2a\u7ebf\u7a0b</li> <li>Tconsume \u88ab\u5524\u9192\uff0c\u56e0\u6b64\u6253\u5370\u51fa ...())</li> </ul> <p>\u6211\u4eec\u770b\u5230\uff0cTproduce \u53ea\u5e0c\u671b\u5524\u9192\u6d88\u8d39\u8005\uff1bTconsume \u53ea\u5e0c\u671b\u5524\u9192\u751f\u4ea7\u8005\uff0c\u56e0\u6b64\u53ef\u4ee5\u7528\u4e24\u4e2a\u6761\u4ef6\u53d8\u91cf\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 <code>pc-check.py</code> \u6765\u9a8c\u8bc1\u7ed3\u679c\uff1a</p> <p>1.\u751f\u4ea7\u8005\u548c\u6d88\u8d39\u8005\u53ea\u6709\u4e00\u5bf9</p> <pre><code>./pc-pv.out 3 1 | python3 pc-check.py 3\n100000 OK\n200000 OK\n......\n1800000 OK\n</code></pre> <p>2.\u751f\u4ea7\u8005\u548c\u6d88\u8d39\u8005\u8d85\u8fc7\u4e00\u5bf9</p> <pre><code># ./pc-pv.out \u62ec\u53f7\u6df1\u5ea6 \u751f\u4ea7\u8005\u548c\u6d88\u8d39\u8005\u7684\u5bf9\u6570\n# python3 pc-check.py \u62ec\u53f7\u6df1\u5ea6\n./pc-pv.out 3 2 | python3 pc-check.py 3\n\nTraceback (most recent call last):\n  File \"9.\u5e76\u53d1\u63a7\u5236-\u540c\u6b65/1-produce-error/pc-check.py\", line 15, in &lt;module&gt;\n    assert 0 &lt;= count &lt;= limit\n          ^^^^^^^^^^^^^^^^^^^\nAssertionError\n</code></pre> <pre><code>#include \"thread.h\"\n#include \"thread-sync.h\"\n\nint n, count = 0;\nmutex_t lk = MUTEX_INIT();\ncond_t cv = COND_INIT();\n\n#define CAN_PRODUCE (count &lt; n)\n#define CAN_CONSUME (count &gt; 0)\n\nvoid Tproduce() {\n  while (1) {\n    mutex_lock(&amp;lk);\n    if (!CAN_PRODUCE) {\n      cond_wait(&amp;cv, &amp;lk);\n    }\n    printf(\"(\"); count++;\n    cond_signal(&amp;cv);\n    mutex_unlock(&amp;lk);\n  }\n}\n\nvoid Tconsume() {\n  while (1) {\n    mutex_lock(&amp;lk);\n    if (!CAN_CONSUME) {\n      cond_wait(&amp;cv, &amp;lk);\n    }\n    printf(\")\"); count--;\n    cond_signal(&amp;cv);\n    mutex_unlock(&amp;lk);\n  }\n}\n\nint main(int argc, char *argv[]) {\n  assert(argc == 3);\n  n = atoi(argv[1]);\n  int T = atoi(argv[2]);\n  setbuf(stdout, NULL);\n  for (int i = 0; i &lt; T; i++) {\n    create(Tproduce);\n    create(Tconsume);\n  }\n}\n</code></pre> <pre><code>import sys\n\nBATCH_SIZE = 100000\n\nlimit = int(sys.argv[1])\n\ncount, checked = 0, 0\n\nwhile True:\n    for ch in sys.stdin.read(BATCH_SIZE):\n        match ch:\n            case '(': count +=1\n            case ')': count -=1\n            case  _ : assert 0\n        assert 0 &lt;= count &lt;= limit\n    checked += BATCH_SIZE\n    print(f'{checked } OK')\n</code></pre> <pre><code>#include &lt;semaphore.h&gt;\n\n// Spinlock\ntypedef int spinlock_t;\n#define SPIN_INIT() 0\n\nstatic inline int atomic_xchg(volatile int *addr, int newval) {\n  int result;\n  asm volatile (\"lock xchg %0, %1\":\n    \"+m\"(*addr), \"=a\"(result) : \"1\"(newval) : \"memory\");\n  return result;\n}\n\nvoid spin_lock(spinlock_t *lk) {\n  while (1) {\n    intptr_t value = atomic_xchg(lk, 1);\n    if (value == 0) {\n      break;\n    }\n  }\n}\nvoid spin_unlock(spinlock_t *lk) {\n  atomic_xchg(lk, 0);\n}\n\n// Mutex\ntypedef pthread_mutex_t mutex_t;\n#define MUTEX_INIT() PTHREAD_MUTEX_INITIALIZER\nvoid mutex_lock(mutex_t *lk)   { pthread_mutex_lock(lk); }\nvoid mutex_unlock(mutex_t *lk) { pthread_mutex_unlock(lk); }\n\n// Conditional Variable\ntypedef pthread_cond_t cond_t;\n#define COND_INIT() PTHREAD_COND_INITIALIZER\n#define cond_wait pthread_cond_wait\n#define cond_broadcast pthread_cond_broadcast\n#define cond_signal pthread_cond_signal\n\n// Semaphore\n#define P sem_wait\n#define V sem_post\n#define SEM_INIT(sem, val) sem_init(sem, 0, val)\n</code></pre> <pre><code>N, Tp, Tc = 1, 2, 2\n\ndef Tproduce(nm):\n  while heap.mutex != 'Yes':\n    sys_sched()\n  heap.mutex = 'No'\n  sys_sched()\n\n  if not (heap.count &lt; N):\n    heap.blocked.append(nm)\n    heap.mutex = 'Yes'\n    sys_sched()\n    while nm in heap.blocked:\n      sys_sched()\n    while heap.mutex != 'Yes':\n      sys_sched()\n    heap.mutex = 'No'\n    sys_sched()\n\n  heap.count += 1\n  sys_sched()\n  sys_write('(')\n  sys_sched()\n\n  if heap.blocked:\n    r = sys_choose([i for i, _ in enumerate(heap.blocked)])\n    heap.blocked.pop(r)\n\n  heap.mutex = 'Yes'\n\ndef Tconsume(nm):\n  while heap.mutex != 'Yes':\n    sys_sched()\n  heap.mutex = 'No'\n  sys_sched()\n\n  if not (heap.count &gt; 0):\n    heap.blocked.append(nm)\n    heap.mutex = 'Yes'\n    sys_sched()\n    while nm in heap.blocked:\n      sys_sched()\n    while heap.mutex != 'Yes':\n      sys_sched()\n    heap.mutex = 'No'\n    sys_sched()\n\n  heap.count -= 1\n  sys_sched()\n  sys_write(')')\n  sys_sched()\n\n  if heap.blocked:\n    r = sys_choose([i for i, _ in enumerate(heap.blocked)])\n    heap.blocked.pop(r)\n\n  heap.mutex = 'Yes'\n\ndef main():\n  heap.count = 0\n  heap.mutex = 'Yes'\n  heap.blocked = []\n\n  for i in range(Tp):\n    sys_spawn(Tproduce, f'Tp{i+1}')\n  for i in range(Tc):\n    sys_spawn(Tconsume, f'Tc{i+1}')\n\n# Outputs:\n# ()()\n# ())(\n</code></pre>"},{"location":"Category/SystemOperation/NJU/9.%20%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%EF%BC%9A%E5%90%8C%E6%AD%A5%20%281%29/#2-","title":"2.\u6b63\u786e\u7684\u751f\u4ea7\u8005-\u6d88\u8d39\u8005\u5b9e\u73b0","text":"<p>\u4e3a\u4ec0\u4e48 <code>pc-cv.c</code>\u5b9e\u73b0\u662f\u9519\u8bef\u7684\uff0c\u9996\u5148\u6211\u4eec\u8981\u7406\u89e3 <code>cond_wait</code> \u51fd\u6570\u6267\u884c\u7684\u8fc7\u7a0b\uff1a</p> <ol> <li>\u8c03\u7528\u65f6\u5fc5\u987b\u4fdd\u8bc1\u5df2\u83b7\u5f97 <code>mutex</code>\uff1b</li> <li><code>wait</code> \u91ca\u653e <code>mutex</code>\uff0c\u8fdb\u5165\u7761\u7720\u72b6\u6001\uff1b</li> <li>\u88ab\u5524\u9192\u540e\u9700\u8981\u91cd\u65b0\u6267\u884c <code>lock(mutex)</code>\uff1b</li> </ol> <p>\u5173\u952e\u95ee\u9898\u51fa\u5728\u7b2c 2 \u6b65\uff0c\u8fdb\u5165\u7761\u7720\u9192\u6765\u4e4b\u540e\uff0c\u6ca1\u6709\u518d\u6b21\u68c0\u67e5\u6761\u4ef6\u662f\u5426\u6210\u7acb\u3002\u73b0\u5728\u6211\u4eec\u589e\u52a0\u4e00\u4e9b\u4ee3\u7801\uff1a</p> <p><pre><code>void Tproduce() {\n  while (1) {\n    mutex_lock(&amp;lk);\nretry:\n    if (!CAN_PRODUCE) {\n      cond_wait(&amp;cv, &amp;lk);\n      goto retry;\n    }\n    printf(\"(\"); count++;\n    cond_signal(&amp;cv);\n    mutex_unlock(&amp;lk);\n  }\n}\n</code></pre> \u6d4b\u8bd5\u7ed3\u679c\u5982\u4e0b\uff1a</p> <pre><code>./pc-pv.out 3 2 | python3 pc-check.py 3\n100000 OK\n200000 OK\n......\n4300000 OK\n4400000 OK\n</code></pre> <p>\u4e00\u822c\u60c5\u51b5\u4e0b\u6211\u4eec\u4f1a\u7528 <code>while</code>:</p> \u793a\u4f8b\uff1apc-cv-whilepc-cv-while.c <p>\u4ee3\u7801\u793a\u4f8b\uff1a\u6b63\u786e\u7684\u751f\u4ea7\u8005-\u6d88\u8d39\u8005\u5b9e\u73b0</p> <p>\u5728\u4efb\u4f55\u7ebf\u7a0b\u6761\u4ef6\u53ef\u80fd\u88ab\u6ee1\u8db3\u65f6\uff0c\u6211\u4eec\u90fd\u6267\u884c <code>cond_broadcast</code> \u5524\u9192\u6b64\u65f6\u6240\u6709\u7761\u7720\u7684\u7ebf\u7a0b\u3002\u7ebf\u7a0b\u88ab\u5524\u9192\u540e\u4f1a\u68c0\u67e5\u81ea\u8eab\u6761\u4ef6\u662f\u5426\u6ee1\u8db3 (\u8fd9\u4e9b\u64cd\u4f5c\u88ab\u4e92\u65a5\u9501\u4fdd\u62a4)\uff0c\u5982\u6761\u4ef6\u4e0d\u6ee1\u8db3\u5219\u518d\u6b21\u5524\u9192\u3002\u56e0\u6b64 while \u5faa\u73af\u9000\u51fa\u65f6\uff0c\u6211\u4eec\u603b\u662f\u53ef\u4ee5\u4fdd\u8bc1\u6761\u4ef6\u6210\u7acb\u3002</p> <pre><code>#include \"thread.h\"\n#include \"thread-sync.h\"\n\nint n, count = 0;\nmutex_t lk = MUTEX_INIT();\ncond_t cv = COND_INIT();\n\n#define CAN_PRODUCE (count &lt; n)\n#define CAN_CONSUME (count &gt; 0)\n\nvoid Tproduce() {\n  while (1) {\n    mutex_lock(&amp;lk);\n    while (!CAN_PRODUCE) {\n      cond_wait(&amp;cv, &amp;lk);\n    }\n    printf(\"(\"); count++;\n    cond_broadcast(&amp;cv);\n    mutex_unlock(&amp;lk);\n  }\n}\n\nvoid Tconsume() {\n  while (1) {\n    mutex_lock(&amp;lk);\n    while (!CAN_CONSUME) {\n      cond_wait(&amp;cv, &amp;lk);\n    }\n    printf(\")\"); count--;\n    cond_broadcast(&amp;cv);\n    mutex_unlock(&amp;lk);\n  }\n}\n\nint main(int argc, char *argv[]) {\n  assert(argc == 3);\n  n = atoi(argv[1]);\n  int T = atoi(argv[2]);\n  setbuf(stdout, NULL);\n  for (int i = 0; i &lt; T; i++) {\n    create(Tproduce);\n    create(Tconsume);\n  }\n}\n</code></pre>"},{"location":"Category/SystemOperation/NJU/9.%20%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%EF%BC%9A%E5%90%8C%E6%AD%A5%20%281%29/#3-lcs","title":"3.\u5e76\u53d1\u8ba1\u7b97 LCS","text":""},{"location":"Category/SystemOperation/NJU/9.%20%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%EF%BC%9A%E5%90%8C%E6%AD%A5%20%281%29/#_2","title":"\u6761\u4ef6\u53d8\u91cf","text":""},{"location":"Category/SystemOperation/NJU/9.%20%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%EF%BC%9A%E5%90%8C%E6%AD%A5%20%281%29/#1","title":"1.\u540c\u6b65\u4e60\u9898","text":"\u793a\u4f8b\uff1afishfish.c <p>\u4ee3\u7801\u793a\u4f8b\uff1a\u4e00\u9053\u7ebf\u7a0b\u540c\u6b65\u4e60\u9898</p> <p>\u4e3a\u4e86\u4f7f\u7528\u6761\u4ef6\u53d8\u91cf\u540c\u6b65\u6253\u5370 &lt;\u3001&gt;\u3001_ \u7684\u4e09\u79cd\u7ebf\u7a0b\uff0c\u6211\u4eec\u53ea\u9700\u8981\u77e5\u9053\u5206\u522b\u4ec0\u4e48\u65f6\u5019\u53ef\u4ee5\u6253\u5370\u8fd9\u4e09\u79cd\u5b57\u7b26\uff1a</p> <ul> <li>\u5728\u4e0a\u4e00\u6761 \u201c\u9c7c\u201d \u88ab\u6253\u5370\u5b8c\u6210\u4e4b\u540e\uff0c&lt; \u6216 &gt; \u90fd\u53ef\u4ee5\uff1b</li> <li>\u4e00\u65e6\u4e00\u6761 \u201c\u9c7c\u201d \u5f00\u59cb\u5f00\u59cb\u6253\u5370\uff0c\u5c31\u5fc5\u987b\u4e25\u683c\u6309\u7167 &lt;&gt;&lt;_ \u6216 &gt;&lt;&gt;_ \u7684\u987a\u5e8f\u6253\u5370</li> </ul> <p>\u6211\u4eec\u628a\u4e0a\u9762\u7684\u6761\u4ef6\u5199\u6210\u6761\u4ef6\u53d8\u91cf\u5bf9\u5e94\u7684\u6761\u4ef6\uff0c\u5c31\u80fd\u6b63\u786e\u5b9e\u73b0\u540c\u6b65\u3002\u5728\u6211\u4eec\u7684\u53c2\u8003\u5b9e\u73b0\u4e2d\uff0c\u4f7f\u7528\u4e00\u4e2a\u72b6\u6001\u673a\u6765\u8868\u793a\u6253\u5370\u8fdb\u884c\u7684\u9636\u6bb5\uff0c\u7b80\u5316\u4e86\u4ee3\u7801\u7684\u5224\u65ad\u903b\u8f91\u3002</p> <pre><code>#include \"thread.h\"\n#include \"thread-sync.h\"\n\n#define LENGTH(arr) (sizeof(arr) / sizeof(arr[0]))\n\nenum { A = 1, B, C, D, E, F, };\n\nstruct rule {\n  int from, ch, to;\n} rules[] = {\n  { A, '&lt;', B },\n  { B, '&gt;', C },\n  { C, '&lt;', D },\n  { A, '&gt;', E },\n  { E, '&lt;', F },\n  { F, '&gt;', D },\n  { D, '_', A },\n};\nint current = A, quota = 1;\n\nmutex_t lk = MUTEX_INIT();\ncond_t cv = COND_INIT();\n\nint next(char ch) {\n  for (int i = 0; i &lt; LENGTH(rules); i++) {\n    struct rule *rule = &amp;rules[i];\n    if (rule-&gt;from == current &amp;&amp; rule-&gt;ch == ch) {\n      return rule-&gt;to;\n    }\n  }\n  return 0;\n}\n\nstatic int can_print(char ch) {\n    return next(ch) != 0 &amp;&amp; quota &gt; 0;\n}\n\nvoid fish_before(char ch) {\n  mutex_lock(&amp;lk);\n  while (!can_print(ch)) {\n    // can proceed only if (next(ch) &amp;&amp; quota)\n    cond_wait(&amp;cv, &amp;lk);\n  }\n  quota--;\n  mutex_unlock(&amp;lk);\n}\n\nvoid fish_after(char ch) {\n  mutex_lock(&amp;lk);\n  quota++;\n  current = next(ch);\n  assert(current);\n  cond_broadcast(&amp;cv);\n  mutex_unlock(&amp;lk);\n}\n\nconst char roles[] = \".&lt;&lt;&lt;&lt;&lt;&gt;&gt;&gt;&gt;___\";\n\nvoid fish_thread(int id) {\n  char role = roles[id];\n  while (1) {\n    fish_before(role);\n    putchar(role);  // Not lock-protected\n    fish_after(role);\n  }\n}\n\nint main() {\n  setbuf(stdout, NULL);\n  for (int i = 0; i &lt; strlen(roles); i++)\n    create(fish_thread);\n}\n</code></pre>"},{"location":"Category/SystemOperation/NJU/9.%20%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%EF%BC%9A%E5%90%8C%E6%AD%A5%20%281%29/#take-away-messages","title":"Take-away Messages","text":"<p>\u540c\u6b65\u7684\u672c\u8d28\u662f\u7ebf\u7a0b\u9700\u8981\u7b49\u5f85\u67d0\u4ef6\u5b83\u6240\u9884\u671f\u7684\u4e8b\u4ef6\u53d1\u751f\uff0c\u800c\u4e8b\u4ef6\u7684\u53d1\u751f\u603b\u662f\u53ef\u4ee5\u7528\u5171\u4eab\u72b6\u6001\u7684\u6761\u4ef6\u6765\u8868\u8fbe\u3002\u5e76\u4e14\u5728\u8fd9\u4e2a\u6761\u4ef6\u88ab\u6ee1\u8db3\u7684\u524d\u63d0\u4e0b\u5b8c\u6210\u4e00\u4e9b\u52a8\u4f5c\uff1a</p> <pre><code>WAIT_UNTIL(cond) with (mutex) {\n  // cond \u5728\u6b64\u65f6\u6210\u7acb\n  work();\n}\n</code></pre> <p>\u8ba1\u7b97\u673a\u7cfb\u7edf\u7684\u8bbe\u8ba1\u8005\u63d0\u4f9b\u4e86\u6761\u4ef6\u53d8\u91cf\u7684\u673a\u5236\u6a21\u4eff\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u5b83\u4e0e\u4e92\u65a5\u9501\u8054\u5408\u4f7f\u7528\uff1a</p> <ul> <li><code>cond_wait(cv, lk)</code> \u91ca\u653e\u4e92\u65a5\u9501 <code>lk</code> \u5e76\u8fdb\u5165\u7761\u7720\u72b6\u6001\u3002\u6ce8\u610f\u88ab\u5524\u9192\u65f6\uff0c<code>cond_wait</code> \u4f1a\u91cd\u65b0\u8bd5\u56fe\u83b7\u5f97\u4e92\u65a5\uff0c\u76f4\u5230\u83b7\u5f97\u4e92\u65a5\u9501\u540e\u624d\u80fd\u8fd4\u56de;</li> <li><code>cond_signal(cv)</code> \u5524\u9192\u4e00\u4e2a\u5728 <code>cv</code> \u4e0a\u7b49\u5f85\u7684\u7ebf\u7a0b;</li> <li><code>cond_broadcast(cv)</code> \u5524\u9192\u6240\u6709\u5728 <code>cv</code> \u4e0a\u7b49\u5f85\u7684\u7ebf\u7a0b;</li> </ul> <p>\u6211\u4eec\u4e5f\u5f88\u81ea\u7136\u5730\u53ef\u4ee5\u7528 wait + broadcast \u5b9e\u73b0 WAIT_UNTIL\uff0c\u4ece\u800c\u5b9e\u73b0\u7ebf\u7a0b\u4e4b\u95f4\u7684\u540c\u6b65\u3002</p> <ol> <li> <p>\u64cd\u4f5c\u7cfb\u7edf\uff1a\u8bbe\u8ba1\u4e0e\u5b9e\u73b0 (2023 \u6625\u5b63\u5b66\u671f) \u21a9</p> </li> <li> <p>9. \u5e76\u53d1\u63a7\u5236\uff1a\u540c\u6b65 (1) \u21a9</p> </li> <li> <p>\u540c\u6b65\uff1a\u751f\u4ea7\u8005-\u6d88\u8d39\u8005\u4e0e\u6761\u4ef6\u53d8\u91cf (\u7b97\u6cd5\u5e76\u884c\u5316\uff1b\u4e07\u80fd\u540c\u6b65\u65b9\u6cd5) [\u5357\u4eac\u5927\u5b662023\u64cd\u4f5c\u7cfb\u7edf-P9] (\u848b\u708e\u5ca9) \u21a9</p> </li> </ol>"},{"location":"Category/SystemOperation/OS-ThreeEasyPieces/25.Dialogue%20on%20Concurrency/","title":"25.Dialogue on Concurrency","text":""},{"location":"Category/SystemOperation/OS-ThreeEasyPieces/25.Dialogue%20on%20Concurrency/#a-dialogue-on-concurrency","title":"A Dialogue on Concurrency","text":"<p>Professor: And thus we reach the second of our three pillars of operating sys- tems: concurrency.</p> <p>Student: I thought there were four pillars...?</p> <p>Professor: Nope, that was in an older version of the book.</p> <p>Student: Umm... OK. So what is concurrency, oh wonderful professor?</p> <p>Professor: Well, imagine we have a peach \u2014</p> <p>Student: (interrupting) Peaches again! What is it with you and peaches?</p> <p>Professor: Ever read T.S. Eliot? The Love Song of J. Alfred Prufrock, \u201cDo I dare to eat a peach\u201d, and all that fun stuff?</p> <p>Student: Oh yes! In English class in high school. Great stuff! I really liked the part where \u2014</p> <p>Professor: (interrupting) This has nothing to do with that \u2014 I just like peaches. Anyhow, imagine there are a lot of peaches on a table, and a lot of people who wish to eat them. Let\u2019s say we did it this way: each eater first identifies a peach visually, and then tries to grab it and eat it. What is wrong with this approach?</p> <p>Student: Hmmm... seems like you might see a peach that somebody else also sees. If they get there first, when you reach out, no peach for you!</p> <p>Professor: Exactly! So what should we do about it?</p> <p>Student: Well, probably develop a better way of going about this. Maybe form a line, and when you get to the front, grab a peach and get on with it. Professor: Good! But what\u2019s wrong with your approach? </p> <p>Student: Sheesh, do I have to do all the work?</p> <p>Professor: Yes.</p> <p>Student: OK, let me think. Well, we used to have many people grabbing for peaches all at once, which is faster. But in my way, we just go one at a time, which is correct, but quite a bit slower. The best kind of approach would be fast and correct, probably.</p> <p>Professor: You are really starting to impress. In fact, you just told us everything we need to know about concurrency! Well done.</p> <p>Student: I did? I thought we were just talking about peaches. Remember, this is usually the part where you make it about computers again.</p> <p>Professor: Indeed. My apologies! One must never forget the concrete. Well, as it turns out, there are certain types of programs that we call multi-threaded applications; each thread is kind of like an independent agent running around in this program, doing things on the program\u2019s behalf. But these threads access memory, and for them, each spot of memory is kind of like one of those peaches. If we don\u2019t coordinate access to memory between threads, the program won\u2019t work as expected. Make sense?</p> <p>Student: Kind of. But why do we talk about this in an OS class? Isn\u2019t that just application programming?</p> <p>Professor: Good question! A few reasons, actually. First, the OS must support multi-threaded applications with primitives such as locks and condition vari- ables, which we\u2019ll talk about soon. Second, the OS itself was the first concurrent program \u2014 it must access its own memory very carefully or many strange and terrible things will happen. Really, it can get quite grisly. Student: I see. Sounds interesting. There are more details, I imagine? Professor: Indeed there are...</p>"},{"location":"Category/SystemOperation/OS-ThreeEasyPieces/26.Concurrency%20An%20Introduction/","title":"26.Concurrency An Introduction","text":""},{"location":"Category/SystemOperation/OS-ThreeEasyPieces/26.Concurrency%20An%20Introduction/#_1","title":"\u5e76\u53d1\u6027\uff1a\u7b80\u4ecb","text":"<p>\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u5df2\u7ecf\u770b\u5230\u4e86\u64cd\u4f5c\u7cfb\u7edf\u6267\u884c\u7684\u57fa\u672c\u62bd\u8c61\u7684\u53d1\u5c55\u3002\u6211\u4eec\u5df2\u7ecf\u770b\u5230\u5982\u4f55\u5c06\u5355\u4e2a\u7269\u7406CPU\u8f6c\u53d8\u4e3a\u591a\u4e2a\u865a\u62dfCPU\uff0c\u4ece\u800c\u5b9e\u73b0\u591a\u4e2a\u7a0b\u5e8f\u540c\u65f6\u8fd0\u884c\u7684\u5e7b\u89c9\u3002\u6211\u4eec\u8fd8\u770b\u5230\u4e86\u5982\u4f55\u4e3a\u6bcf\u4e2a\u8fdb\u7a0b\u521b\u5efa\u4e00\u4e2a\u5927\u578b\u7684\u3001\u79c1\u6709\u7684\u865a\u62df\u5185\u5b58\u7684\u5e7b\u89c9\uff1b\u8fd9\u4e2a\u5730\u5740\u7a7a\u95f4\u7684\u62bd\u8c61\u4f7f\u5f97\u6bcf\u4e2a\u7a0b\u5e8f\u5728\u884c\u4e3a\u4e0a\u90fd\u50cf\u62e5\u6709\u81ea\u5df1\u7684\u5185\u5b58\u4e00\u6837\uff0c\u800c\u5b9e\u9645\u4e0a\u64cd\u4f5c\u7cfb\u7edf\u5728\u7269\u7406\u5185\u5b58\uff08\u6709\u65f6\u8fd8\u5305\u62ec\u78c1\u76d8\uff09\u4e0a\u79d8\u5bc6\u5730\u590d\u7528\u5730\u5740\u7a7a\u95f4\u3002</p>"},{"location":"Category/resource/","title":"Resources","text":"<ul> <li>CS \u81ea\u5b66\u6307\u5357</li> <li>\u4e2d\u79d1\u5927\u90d1\u70c7\u3001\u6768\u575a\u5168\u5957\u300a\u8ba1\u7b97\u673a\u7f51\u7edc\uff08\u81ea\u9876\u5411\u4e0b\u65b9\u6cd5 \u7b2c7\u7248\uff0cJames F.Kurose\uff0cKeith W.Ross\uff09\u300b\u8bfe\u7a0b</li> <li>\u7cbe\u76ca\u526f\u4e1a\uff1a\u7a0b\u5e8f\u5458\u5982\u4f55\u4f18\u96c5\u5730\u505a\u526f\u4e1a</li> </ul>"}]}